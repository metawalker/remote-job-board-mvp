// Generated by Copilot
// Simple test for Google Jobs structured scraper using Node.js directly
const axios = require('axios');
const cheerio = require('cheerio');

async function testStructuredScraper() {
  console.log('üîç Testing Google Jobs Structured Scraper...\n');

  try {
    // Test basic Google search for jobs
    const query = 'remote software developer';
    const location = 'United States';
    const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(query)}&l=${encodeURIComponent(location)}&ibp=htl;jobs&hl=en&gl=us`;
    
    console.log('Search URL:', searchUrl);
    
    const userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36';
    
    const response = await axios.get(searchUrl, {
      headers: {
        'User-Agent': userAgent,
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
      },
      timeout: 30000
    });

    console.log('Response status:', response.status);
    console.log('Response length:', response.data.length);
    
    const $ = cheerio.load(response.data);
    
    // Try to find job-related elements
    const selectors = [
      '[data-ved][jsname]',
      '.job-bixbox',
      '.BYM4Nd',
      '[role="listitem"]',
      'div[data-ved]',
      'h3'
    ];

    for (const selector of selectors) {
      const elements = $(selector);
      if (elements.length > 0) {
        console.log(`‚úÖ Found ${elements.length} elements with selector: ${selector}`);
        
        // Try to extract text from first few elements
        elements.slice(0, 3).each((i, el) => {
          const text = $(el).text().trim();
          if (text && text.length > 10) {
            console.log(`   Element ${i + 1}: ${text.substring(0, 100)}...`);
          }
        });
      } else {
        console.log(`‚ùå No elements found with selector: ${selector}`);
      }
    }

    // Look for structured data
    console.log('\nüîç Looking for JSON-LD structured data...');
    const scripts = $('script[type="application/ld+json"]');
    console.log(`Found ${scripts.length} JSON-LD scripts`);
    
    scripts.each((i, script) => {
      try {
        const content = $(script).html();
        if (content) {
          const data = JSON.parse(content);
          if (data['@type'] === 'JobPosting' || (Array.isArray(data) && data.some(item => item['@type'] === 'JobPosting'))) {
            console.log(`‚úÖ Found JobPosting structured data in script ${i + 1}`);
          }
        }
      } catch (error) {
        // Ignore JSON parsing errors
      }
    });

    // Look for job-related keywords in the page
    console.log('\nüîç Searching for job-related keywords...');
    const pageText = $('body').text().toLowerCase();
    const jobKeywords = ['job', 'position', 'career', 'employment', 'hiring', 'apply', 'salary'];
    
    jobKeywords.forEach(keyword => {
      const count = (pageText.match(new RegExp(keyword, 'g')) || []).length;
      console.log(`   "${keyword}": ${count} occurrences`);
    });

    console.log('\n‚úÖ Basic test completed. The scraper can fetch Google search results.');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response headers:', error.response.headers);
    }
  }
}

// Run the test
testStructuredScraper().catch(console.error);
