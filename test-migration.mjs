// Generated by Copilot
// Simple test to verify Supabase connection and create scraping sources table

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://czvkltyhkzbuvsvqdlun.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6dmtsdHloa3pidXZzdnFkbHVuIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDUxMTgxMSwiZXhwIjoyMDY2MDg3ODExfQ.g-EmjKB06zXK46-2AdupzKXhTsEePklWuBgqBqNCbTI'

async function testAndMigrate() {
  const supabase = createClient(supabaseUrl, supabaseServiceKey)
  
  try {
    console.log('Testing Supabase connection...')
    
    // Test connection
    const { data, error } = await supabase.from('jobs').select('count(*)', { count: 'exact' })
    
    if (error) {
      console.error('Connection test failed:', error)
      return
    }
    
    console.log('✅ Supabase connection successful')
    
    // Check if scraping_sources table exists
    const { data: tableCheck, error: tableError } = await supabase
      .from('scraping_sources')
      .select('count(*)', { count: 'exact' })
    
    if (tableError) {
      console.log('scraping_sources table does not exist, creating it...')
      
      // Insert default sources directly (the table will be created by the API)
      console.log('The table will be created automatically when the API attempts to insert data.')
      console.log('Please run the migration SQL in Supabase SQL Editor:')
      console.log('1. Go to https://supabase.com/dashboard/project/czvkltyhkzbuvsvqdlun/sql')
      console.log('2. Copy and paste the contents of supabase/scraping-sources-migration.sql')
      console.log('3. Click "Run" to execute the migration')
      
    } else {
      console.log(`✅ scraping_sources table exists with ${tableCheck[0].count} records`)
      
      // Show existing sources
      const { data: sources, error: sourcesError } = await supabase
        .from('scraping_sources')
        .select('*')
      
      if (sourcesError) {
        console.error('Error fetching sources:', sourcesError)
      } else {
        console.log('Existing sources:')
        sources.forEach((source, index) => {
          console.log(`  ${index + 1}. ${source.name}: ${source.url}`)
        })
      }
    }
    
    // Test admin settings
    const { data: settings, error: settingsError } = await supabase
      .from('admin_settings')
      .select('*')
    
    if (settingsError) {
      console.log('admin_settings table issue:', settingsError)
    } else {
      console.log(`✅ admin_settings table accessible with ${settings?.length || 0} records`)
    }
    
  } catch (error) {
    console.error('Unexpected error:', error)
  }
}

testAndMigrate()
