// Generated by Copilot
import { createClient } from '@supabase/supabase-js'
import fs from 'fs'
import path from 'path'

const supabaseUrl = 'https://czvkltyhkzbuvsvqdlun.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6dmtsdHloa3pidXZzdnFkbHVuIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDUxMTgxMSwiZXhwIjoyMDY2MDg3ODExfQ.g-EmjKB06zXK46-2AdupzKXhTsEePklWuBgqBqNCbTI'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function runRSSScraperMigration() {
  try {
    console.log('Running RSS scraper migration...')
    
    // Read the migration file
    const migrationPath = path.join(process.cwd(), 'supabase', 'rss-scraper-migration.sql')
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8')
    
    console.log('Migration SQL:')
    console.log(migrationSQL)
    
    // Execute the migration
    const { data, error } = await supabase.rpc('exec_sql', {
      sql: migrationSQL
    })
    
    if (error) {
      console.error('Migration failed:', error)
      
      // Try alternative approach - run each statement separately
      console.log('Trying alternative approach...')
      
      const statements = migrationSQL
        .split(';')
        .map(s => s.trim())
        .filter(s => s.length > 0 && !s.startsWith('--'))
      
      for (const statement of statements) {
        if (statement.trim()) {
          console.log(`Executing: ${statement.substring(0, 100)}...`)
          try {
            const { error: stmtError } = await supabase.rpc('exec_sql', {
              sql: statement + ';'
            })
            if (stmtError) {
              console.error(`Statement failed: ${stmtError.message}`)
            } else {
              console.log('Statement executed successfully')
            }
          } catch (err) {
            console.error(`Statement error:`, err)
          }
        }
      }
    } else {
      console.log('Migration completed successfully!')
      console.log('Result:', data)
    }
    
  } catch (error) {
    console.error('Error running migration:', error)
  }
}

runRSSScraperMigration()
