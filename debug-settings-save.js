// Generated by Copilot
// Debug script to test admin settings save functionality

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

async function debugSettingsSave() {
  console.log('Testing admin settings save functionality...')
  
  // Create admin client with service role key
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )

  try {
    // First, check current scraping sources
    console.log('\n1. Current scraping sources:')
    const { data: currentSources, error: sourceError } = await supabase
      .from('scraping_sources')
      .select('*')
      .order('created_at', { ascending: true })

    if (sourceError) {
      console.error('Error fetching sources:', sourceError)
      return
    }

    console.log('Sources:', JSON.stringify(currentSources, null, 2))

    // Test updating a source
    if (currentSources && currentSources.length > 0) {
      const firstSource = currentSources[0]
      console.log('\n2. Testing source update...')
      console.log('Original enabled status:', firstSource.enabled)
      
      const newEnabledStatus = !firstSource.enabled
      const { data: updateResult, error: updateError } = await supabase
        .from('scraping_sources')
        .update({ enabled: newEnabledStatus })
        .eq('id', firstSource.id)
        .select()

      if (updateError) {
        console.error('Error updating source:', updateError)
      } else {
        console.log('Update successful:', updateResult)
      }

      // Check if the update actually worked
      const { data: verifyResult, error: verifyError } = await supabase
        .from('scraping_sources')
        .select('*')
        .eq('id', firstSource.id)
        .single()

      if (verifyError) {
        console.error('Error verifying update:', verifyError)
      } else {
        console.log('Verified enabled status:', verifyResult.enabled)
        console.log('Update was', verifyResult.enabled === newEnabledStatus ? 'SUCCESSFUL' : 'FAILED')
      }
    }

    // Test the admin settings structure
    console.log('\n3. Testing admin_settings table:')
    const { data: adminSettings, error: adminError } = await supabase
      .from('admin_settings')
      .select('*')

    if (adminError) {
      console.error('Error fetching admin settings:', adminError)
    } else {
      console.log('Admin settings:', JSON.stringify(adminSettings, null, 2))
    }

  } catch (error) {
    console.error('Unexpected error:', error)
  }
}

debugSettingsSave()
