// Generated by Copilot
// Script to apply the admin migration to Supabase
// This script reads the admin-migration.sql file and applies it to your Supabase database

import { createClient } from '@supabase/supabase-js'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Load environment variables
import dotenv from 'dotenv'
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('❌ Missing Supabase environment variables')
  console.error('Make sure NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY are set in .env.local')
  process.exit(1)
}

// Create Supabase client with service role key
const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function applyAdminMigration() {
  console.log('🔐 Applying Admin Migration to Supabase...\n')

  try {
    // Read the admin migration file
    const migrationPath = path.join(__dirname, 'supabase', 'admin-migration.sql')
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8')

    console.log('📖 Reading migration from:', migrationPath)
    console.log('📏 Migration size:', migrationSQL.length, 'characters\n')

    // Split the migration into individual statements
    const statements = migrationSQL
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'))

    console.log('📝 Found', statements.length, 'SQL statements to execute\n')

    let successCount = 0
    let errorCount = 0
    const errors = []

    // Execute each statement
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i]
      
      // Skip empty statements
      if (!statement || statement.length < 10) {
        continue
      }

      console.log(`⚡ Executing statement ${i + 1}/${statements.length}...`)
      console.log(`📄 SQL: ${statement.substring(0, 100)}${statement.length > 100 ? '...' : ''}`)
      
      try {
        const { error } = await supabase.rpc('exec_sql', { sql: statement })
        
        if (error) {
          console.error(`❌ Error in statement ${i + 1}:`, error.message)
          errors.push({ statement: i + 1, error: error.message, sql: statement })
          errorCount++
        } else {
          console.log(`✅ Statement ${i + 1} executed successfully`)
          successCount++
        }
      } catch (err) {
        console.error(`❌ Exception in statement ${i + 1}:`, err.message)
        errors.push({ statement: i + 1, error: err.message, sql: statement })
        errorCount++
      }
      
      console.log('') // Add spacing
    }

    // Summary
    console.log('📊 Migration Summary:')
    console.log(`✅ Successful statements: ${successCount}`)
    console.log(`❌ Failed statements: ${errorCount}`)
    
    if (errors.length > 0) {
      console.log('\n❌ Errors encountered:')
      errors.forEach((error, index) => {
        console.log(`\n${index + 1}. Statement ${error.statement}:`)
        console.log(`   Error: ${error.error}`)
        console.log(`   SQL: ${error.sql.substring(0, 200)}${error.sql.length > 200 ? '...' : ''}`)
      })
    } else {
      console.log('\n🎉 Admin migration completed successfully!')
      console.log('\n📋 Next steps:')
      console.log('1. Set is_admin = true for your admin user in the user_profiles table')
      console.log('2. Test the admin dashboard at /admin/review')
      console.log('3. Run the scraper to get some jobs to review')
    }

  } catch (error) {
    console.error('💥 Fatal error applying admin migration:', error)
    process.exit(1)
  }
}

// Run the migration
applyAdminMigration()
