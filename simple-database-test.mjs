// Generated by Copilot
// Simple migration script using direct table operations

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://czvkltyhkzbuvsvqdlun.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6dmtsdHloa3pidXZzdnFkbHVuIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDUxMTgxMSwiZXhwIjoyMDY2MDg3ODExfQ.g-EmjKB06zXK46-2AdupzKXhTsEePklWuBgqBqNCbTI'

async function setupDatabase() {
  const supabase = createClient(supabaseUrl, supabaseServiceKey)
  
  try {
    console.log('Testing connection...')
    
    // Test if companies table exists
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('count(*)', { count: 'exact' })
      .limit(1)
    
    if (companiesError) {
      console.log('Companies table does not exist or is not accessible:', companiesError.message)
      console.log('Please ensure the database schema is set up correctly.')
      console.log('You may need to run the main schema.sql file first.')
    } else {
      console.log(`✅ Companies table exists with ${companies[0]?.count || 0} records`)
    }
    
    // Test if jobs table exists
    const { data: jobs, error: jobsError } = await supabase
      .from('jobs')
      .select('count(*)', { count: 'exact' })
      .limit(1)
    
    if (jobsError) {
      console.log('Jobs table does not exist or is not accessible:', jobsError.message)
    } else {
      console.log(`✅ Jobs table exists with ${jobs[0]?.count || 0} records`)
    }
    
    // Check if scraping_sources table exists
    const { data: scrapingSources, error: scrapingError } = await supabase
      .from('scraping_sources')
      .select('count(*)', { count: 'exact' })
      .limit(1)
    
    if (scrapingError) {
      console.log('scraping_sources table does not exist:', scrapingError.message)
      console.log('This table needs to be created manually in the Supabase dashboard.')
    } else {
      console.log(`✅ scraping_sources table exists with ${scrapingSources[0]?.count || 0} records`)
      
      // If table exists but is empty, add some default sources
      if (scrapingSources[0]?.count === 0) {
        console.log('Adding default scraping sources...')
        
        const { error: insertError } = await supabase
          .from('scraping_sources')
          .insert([
            {
              name: 'YCombinator Jobs',
              url: 'https://www.ycombinator.com/jobs',
              enabled: true,
              description: 'Y Combinator startup jobs',
              priority: 'high'
            },
            {
              name: 'We Work Remotely',
              url: 'https://weworkremotely.com/remote-jobs',
              enabled: true,
              description: 'Remote work job board',
              priority: 'medium'
            },
            {
              name: 'Google Careers',
              url: 'https://careers.google.com/jobs/results/',
              enabled: true,
              description: 'Google career opportunities',
              priority: 'high'
            }
          ])
        
        if (insertError) {
          console.error('Error inserting default sources:', insertError)
        } else {
          console.log('✅ Default scraping sources added successfully')
        }
      }
    }
    
    // Test a simple job insertion to see what's failing
    console.log('\nTesting job insertion...')
    
    // First create a test company
    const { data: testCompany, error: companyError } = await supabase
      .from('companies')
      .insert({
        name: 'Test Company',
        description: 'Test company for scraper',
        is_verified: false
      })
      .select('id')
      .single()
    
    if (companyError) {
      console.error('Error creating test company:', companyError)
    } else {
      console.log('✅ Test company created:', testCompany.id)
      
      // Now try to insert a test job
      const { data: testJob, error: jobError } = await supabase
        .from('jobs')
        .insert({
          company_id: testCompany.id,
          title: 'Test Developer Position',
          description: 'Test job for scraper validation',
          location: 'Remote',
          job_type: 'full-time',
          experience_level: 'mid',
          salary_min: 50000,
          salary_max: 80000,
          apply_url: 'https://example.com/test-job',
          is_active: true,
          scraped_from: 'Test Scraper'
        })
        .select('id')
        .single()
      
      if (jobError) {
        console.error('Error creating test job:', jobError)
        console.log('This indicates why the scraper insertions are failing.')
      } else {
        console.log('✅ Test job created successfully:', testJob.id)
        
        // Clean up test data
        await supabase.from('jobs').delete().eq('id', testJob.id)
        await supabase.from('companies').delete().eq('id', testCompany.id)
        console.log('✅ Test data cleaned up')
      }
    }
    
  } catch (error) {
    console.error('Unexpected error:', error)
  }
}

setupDatabase()
