// Generated by Copilot
// Script to apply the database schema to Supabase
// This script reads the schema.sql file and applies it to your Supabase database

import { createClient } from '@supabase/supabase-js'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Load environment variables
import dotenv from 'dotenv'
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('❌ Missing Supabase environment variables')
  console.error('Make sure NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY are set in .env.local')
  process.exit(1)
}

// Create Supabase client with service role key
const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function applySchema() {
  console.log('🚀 Applying Database Schema to Supabase...\n')

  try {
    // Read the schema file
    const schemaPath = path.join(__dirname, 'supabase', 'schema.sql')
    const schemaSQL = fs.readFileSync(schemaPath, 'utf8')

    console.log('📖 Reading schema from:', schemaPath)
    console.log('📏 Schema size:', schemaSQL.length, 'characters\n')

    // Split the schema into individual statements
    const statements = schemaSQL
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'))

    console.log('📝 Found', statements.length, 'SQL statements to execute\n')

    let successCount = 0
    let errorCount = 0
    const errors = []

    // Execute each statement
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i] + ';'
      
      try {
        console.log(`⏳ Executing statement ${i + 1}/${statements.length}...`)
        
        // Use the RPC function to execute raw SQL
        const { data, error } = await supabase.rpc('exec_sql', { sql: statement })
        
        if (error) {
          // Some errors are expected (like "already exists" errors)
          if (error.message.includes('already exists') || 
              error.message.includes('duplicate key') ||
              error.message.includes('relation') && error.message.includes('already exists')) {
            console.log(`⚠️  Skipped (already exists):`, error.message.substring(0, 100) + '...')
          } else {
            console.error(`❌ Error in statement ${i + 1}:`, error.message.substring(0, 200) + '...')
            errors.push({ statement: i + 1, error: error.message })
            errorCount++
          }
        } else {
          console.log(`✅ Statement ${i + 1} executed successfully`)
          successCount++
        }
      } catch (err) {
        console.error(`❌ Exception in statement ${i + 1}:`, err.message)
        errors.push({ statement: i + 1, error: err.message })
        errorCount++
      }
    }

    console.log('\n🎯 Schema Application Results:')
    console.log('=' .repeat(40))
    console.log(`✅ Successful statements: ${successCount}`)
    console.log(`❌ Failed statements: ${errorCount}`)
    
    if (errors.length > 0) {
      console.log('\n❌ Errors encountered:')
      errors.forEach((err, index) => {
        console.log(`${index + 1}. Statement ${err.statement}: ${err.error.substring(0, 150)}...`)
      })
    }

    if (errorCount === 0) {
      console.log('\n🎉 Schema applied successfully! Your database is ready.')
    } else if (successCount > 0) {
      console.log('\n⚠️  Schema applied with some errors. Check the errors above.')
      console.log('   Many "already exists" errors are normal if running this script multiple times.')
    } else {
      console.log('\n💥 Schema application failed. Check your Supabase connection and permissions.')
    }

  } catch (error) {
    console.error('💥 Fatal error applying schema:', error.message)
    process.exit(1)
  }
}

// Alternative method: Direct SQL execution (if RPC doesn't work)
async function applySchemaDirectly() {
  console.log('🔄 Trying direct SQL execution method...\n')
  
  try {
    const schemaPath = path.join(__dirname, 'supabase', 'schema.sql')
    const schemaSQL = fs.readFileSync(schemaPath, 'utf8')

    // Execute the entire schema as one block
    const { data, error } = await supabase.from('').select().limit(0) // Test connection first
    
    console.log('⚠️  Direct SQL execution requires manual application.')
    console.log('🔗 Please follow these steps:')
    console.log('')
    console.log('1. Open your Supabase Dashboard: https://supabase.com/dashboard')
    console.log('2. Navigate to your project:', supabaseUrl)
    console.log('3. Go to "SQL Editor" in the left sidebar')
    console.log('4. Click "New Query"')
    console.log('5. Copy the contents of supabase/schema.sql')
    console.log('6. Paste into the SQL editor')
    console.log('7. Click "Run" to execute')
    console.log('')
    console.log('📁 Schema file location:', schemaPath)
    console.log('📊 Schema file size:', schemaSQL.length, 'characters')
    
  } catch (error) {
    console.error('❌ Connection test failed:', error.message)
  }
}

// Run the schema application
console.log('🎯 Supabase Schema Application Tool')
console.log('=' .repeat(50))

applySchemaDirectly()
