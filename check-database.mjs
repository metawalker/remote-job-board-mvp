// Generated by Copilot
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://czvkltyhkzbuvsvqdlun.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6dmtsdHloa3pidXZzdnFkbHVuIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDUxMTgxMSwiZXhwIjoyMDY2MDg3ODExfQ.g-EmjKB06zXK46-2AdupzKXhTsEePklWuBgqBqNCbTI'

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  db: {
    schema: 'public'
  }
})

async function checkJobsTable() {
  try {
    console.log('Checking jobs table structure...')
    
    // Try to query the table to see its current structure
    const { data, error } = await supabase
      .from('jobs')
      .select('*')
      .limit(1)
    
    if (error) {
      console.error('Error querying jobs table:', error)
    } else {
      console.log('Sample job record (showing available columns):')
      if (data && data.length > 0) {
        console.log('Columns in jobs table:', Object.keys(data[0]))
        console.log('Sample data:', data[0])
      } else {
        console.log('No jobs found in table')
      }
    }
    
    // Try to insert a test record to see what columns are available
    console.log('\nTesting job insertion...')
    const testJob = {
      title: 'Test RSS Job',
      description: 'Test job from RSS scraper',
      location: 'Remote',
      employment_type: 'full-time',
      remote_type: 'remote',
      apply_url: 'https://example.com/test-job',
      is_active: true
    }
    
    // First, create a test company
    const { data: company, error: companyError } = await supabase
      .from('companies')
      .upsert({
        name: 'Test RSS Company',
        description: 'Test company for RSS scraper',
        is_verified: false
      })
      .select()
      .single()
    
    if (companyError) {
      console.error('Error creating test company:', companyError)
      return
    }
    
    console.log('Created test company:', company.id)
    
    // Now try to insert a job
    const { data: jobData, error: jobError } = await supabase
      .from('jobs')
      .insert({
        ...testJob,
        company_id: company.id
      })
      .select()
    
    if (jobError) {
      console.error('Error inserting test job:', jobError)
    } else {
      console.log('Successfully inserted test job:', jobData)
      
      // Clean up - delete the test job
      await supabase.from('jobs').delete().eq('id', jobData[0].id)
      console.log('Cleaned up test job')
    }
    
  } catch (error) {
    console.error('Error:', error)
  }
}

checkJobsTable()
