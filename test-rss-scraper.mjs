// Generated by Copilot
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

// Test the RSS scraper by directly calling its API endpoint
import axios from 'axios';

async function testRSSScraperAPI() {
  try {
    console.log('Testing RSS scraper via API endpoint...');
    
    // Start the Next.js dev server if not already running
    const response = await axios.post('http://localhost:3000/api/scrape', {}, {
      timeout: 60000,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Scraping completed!');
    console.log('Results:', JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('Next.js dev server is not running. Please start it with: npm run dev');
    } else {
      console.error('Error testing RSS scraper:', error.response?.data || error.message);
    }
  }
}

// Alternative: Test RSS parsing directly
async function testRSSParsingDirect() {
  console.log('Testing RSS parsing directly...');
  
  try {
    const axios = require('axios');
    const { parseString } = require('xml2js');
    const { promisify } = require('util');
    
    const parseXML = promisify(parseString);
    
    // Test RemoteOK RSS feed
    console.log('Fetching RemoteOK RSS feed...');
    const response = await axios.get('https://remoteok.io/remote-jobs.rss', {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'application/rss+xml, application/xml, text/xml, */*'
      },
      timeout: 15000
    });
    
    console.log('Parsing XML...');
    const xmlData = await parseXML(response.data);
    const items = xmlData?.rss?.channel?.[0]?.item || [];
    
    console.log(`Found ${items.length} items in RemoteOK feed`);
    
    if (items.length > 0) {
      console.log('Sample item:');
      console.log({
        title: items[0]?.title?.[0] || '',
        link: items[0]?.link?.[0] || '',
        pubDate: items[0]?.pubDate?.[0] || '',
        description: (items[0]?.description?.[0] || '').substring(0, 200) + '...'
      });
    }
    
  } catch (error) {
    console.error('Error testing RSS parsing:', error.message);
  }
}

// Run the tests
async function runTests() {
  console.log('=== RSS Scraper Test ===\n');
  
  // First try direct RSS parsing
  await testRSSParsingDirect();
  
  console.log('\n=== API Endpoint Test ===\n');
  
  // Then try the API endpoint
  await testRSSScraperAPI();
}

runTests();
