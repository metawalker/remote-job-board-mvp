// Generated by Copilot
'use client'

import { useState, useEffect } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { useJobSearch } from '@/lib/supabase/hooks'
import { JobList } from '@/components/jobs/job-list'
import { JobSearch } from '@/components/jobs/job-search'
import { SearchSuggestions } from '@/components/jobs/search-suggestions'
import { SavedSearches } from '@/components/jobs/saved-searches'
import { Button } from '@/components/ui/button'
import { ArrowLeft } from 'lucide-react'
import Link from 'next/link'

interface SearchFilters {
  title: string
  location: string
  employmentType: string
  skills: string
  salaryMin: string
  salaryMax: string
}

export default function SearchPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { jobs, loading, error, totalCount, pagination, searchJobs } = useJobSearch()
  const [currentSearchParams, setCurrentSearchParams] = useState<any>({})
  const [hasPerformedSearch, setHasPerformedSearch] = useState(false)

  // Initialize search from URL parameters
  useEffect(() => {
    const initialFilters = {
      title: searchParams.get('title') || '',
      location: searchParams.get('location') || '',
      employmentType: searchParams.get('type') || '',
      skills: searchParams.get('skills') || '',
      salaryMin: searchParams.get('salary_min') || '',
      salaryMax: searchParams.get('salary_max') || ''
    }

    // Check if any filters are provided
    const hasFilters = Object.values(initialFilters).some(value => value.trim() !== '')
    
    if (hasFilters) {
      handleSearch(initialFilters)
    }
  }, [searchParams])

  // Handle quick search from suggestions
  const handleQuickSearch = (query: string, type: 'title' | 'location' | 'skills') => {
    const filters = {
      title: type === 'title' ? query : '',
      location: type === 'location' ? query : '',
      employmentType: '',
      skills: type === 'skills' ? query : '',
      salaryMin: '',
      salaryMax: ''
    }
    
    handleSearch(filters)
  }

  // Handle search functionality
  const handleSearch = (filters: SearchFilters) => {
    const searchParamsObj = {
      title: filters.title || undefined,
      location: filters.location || undefined,
      employmentType: filters.employmentType || undefined,
      skills: filters.skills || undefined,
      salaryMin: filters.salaryMin ? parseInt(filters.salaryMin) : undefined,
      salaryMax: filters.salaryMax ? parseInt(filters.salaryMax) : undefined,
      page: 1
    }
    
    setCurrentSearchParams(searchParamsObj)
    setHasPerformedSearch(true)
    searchJobs(searchParamsObj)

    // Update URL with search parameters
    const urlParams = new URLSearchParams()
    if (filters.title) urlParams.set('title', filters.title)
    if (filters.location) urlParams.set('location', filters.location)
    if (filters.employmentType) urlParams.set('type', filters.employmentType)
    if (filters.skills) urlParams.set('skills', filters.skills)
    if (filters.salaryMin) urlParams.set('salary_min', filters.salaryMin)
    if (filters.salaryMax) urlParams.set('salary_max', filters.salaryMax)
    
    router.replace(`/search?${urlParams.toString()}`, { scroll: false })
  }

  // Handle search clear
  const handleClearSearch = () => {
    setHasPerformedSearch(false)
    setCurrentSearchParams({})
    router.replace('/search', { scroll: false })
  }

  // Handle pagination for search results
  const handlePageChange = (page: number) => {
    const newSearchParams = { ...currentSearchParams, page }
    setCurrentSearchParams(newSearchParams)
    searchJobs(newSearchParams)
  }

  return (
    <div className="min-h-screen bg-background p-8">
      <div className="max-w-6xl mx-auto space-y-8">
        <div className="flex items-center gap-4">
          <Link href="/">
            <Button variant="ghost" size="sm" className="flex items-center gap-2">
              <ArrowLeft className="h-4 w-4" />
              Back to Home
            </Button>
          </Link>
          <div>
            <h1 className="text-3xl font-bold text-foreground">Search Jobs</h1>
            <p className="text-muted-foreground">
              Find your perfect remote opportunity
            </p>
          </div>
        </div>

        {/* Search Section */}
        <JobSearch 
          onSearch={handleSearch}
          onClear={handleClearSearch}
          loading={loading}
          totalResults={hasPerformedSearch ? totalCount : undefined}
        />

        {/* Saved Searches */}
        <SavedSearches onLoadSearch={handleSearch} />

        {/* Results Section */}
        {hasPerformedSearch && (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-bold">Search Results</h2>
            </div>
            
            <JobList 
              searchMode={true}
              searchData={{
                jobs,
                loading,
                error,
                totalCount,
                pagination,
                onPageChange: handlePageChange
              }}
            />
          </div>
        )}

        {/* Search Suggestions */}
        {!hasPerformedSearch && (
          <div className="space-y-8">
            <div className="text-center py-8">
              <h3 className="text-xl font-semibold mb-2">Popular Search Categories</h3>
              <p className="text-muted-foreground">
                Browse popular job titles, skills, and locations to get started
              </p>
            </div>
            <SearchSuggestions onQuickSearch={handleQuickSearch} />
          </div>
        )}
      </div>
    </div>
  )
}