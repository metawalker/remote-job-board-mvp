// Generated by Copilot
'use client'

import { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { formatDistanceToNow, format } from 'date-fns'
import { 
  ArrowLeft, 
  Building2, 
  MapPin, 
  Calendar, 
  DollarSign, 
  Clock, 
  Users, 
  Globe, 
  ExternalLink,
  CheckCircle,
  Briefcase,
  Target
} from 'lucide-react'

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Tag } from '@/components/ui/tag'

interface Company {
  id: string
  name: string
  description: string | null
  website: string | null
  logo_url: string | null
  industry: string | null
  size_category: string | null
  location: string | null
  founded_year: number | null
  is_verified: boolean
}

interface JobDetails {
  id: string
  title: string
  description: string
  location: string
  salary_min: number | null
  salary_max: number | null
  employment_type: string
  remote_type: string
  skills: string[]
  apply_url: string | null
  posted_at: string
  expires_at: string | null
  is_active: boolean
  company: Company
}

interface JobResponse {
  job: JobDetails
}

export default function JobDetailsPage() {
  const params = useParams()
  const router = useRouter()
  const [job, setJob] = useState<JobDetails | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const jobId = params.id as string

  useEffect(() => {
    const fetchJob = async () => {
      try {
        const response = await fetch(`/api/jobs/${jobId}`)
        
        if (!response.ok) {
          if (response.status === 404) {
            setError('Job not found')
          } else {
            setError('Failed to load job details')
          }
          return
        }

        const data: JobResponse = await response.json()
        setJob(data.job)
      } catch (err) {
        setError('Failed to load job details')
        console.error('Error fetching job:', err)
      } finally {
        setLoading(false)
      }
    }

    if (jobId) {
      fetchJob()
    }
  }, [jobId])

  const formatSalary = (min: number | null, max: number | null) => {
    if (!min && !max) return 'Salary not disclosed'
    if (min && max) return `$${min.toLocaleString()} - $${max.toLocaleString()}`
    if (min) return `From $${min.toLocaleString()}`
    if (max) return `Up to $${max.toLocaleString()}`
    return 'Salary not disclosed'
  }

  const formatEmploymentType = (type: string) => {
    return type.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ')
  }

  const formatRemoteType = (type: string) => {
    switch (type) {
      case 'remote': return 'Fully Remote'
      case 'hybrid': return 'Hybrid'
      case 'on-site': return 'On-site'
      default: return type
    }
  }

  const formatCompanySize = (size: string | null) => {
    if (!size) return null
    switch (size) {
      case 'startup': return 'Startup (1-10 employees)'
      case 'small': return 'Small (11-50 employees)'
      case 'medium': return 'Medium (51-200 employees)'
      case 'large': return 'Large (201-1000 employees)'
      case 'enterprise': return 'Enterprise (1000+ employees)'
      default: return size
    }
  }

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="animate-pulse space-y-6">
            <div className="h-8 bg-gray-200 rounded w-1/3"></div>
            <div className="space-y-4">
              <div className="h-4 bg-gray-200 rounded w-full"></div>
              <div className="h-4 bg-gray-200 rounded w-3/4"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2"></div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (error || !job) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">
            {error || 'Job not found'}
          </h1>
          <p className="text-gray-600 mb-6">
            The job you're looking for doesn't exist or has been removed.
          </p>
          <Button onClick={() => router.push('/')} className="inline-flex items-center">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Jobs
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        {/* Back Button */}
        <Button 
          variant="ghost" 
          onClick={() => router.push('/')}
          className="mb-6 inline-flex items-center"
        >
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Jobs
        </Button>

        {/* Job Header */}
        <Card className="mb-6">
          <CardHeader>
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <CardTitle className="text-3xl mb-2">{job.title}</CardTitle>
                <CardDescription className="text-lg">
                  <div className="flex items-center space-x-4 flex-wrap">
                    <div className="flex items-center">
                      <Building2 className="mr-1 h-4 w-4" />
                      {job.company.name}
                      {job.company.is_verified && (
                        <CheckCircle className="ml-1 h-4 w-4 text-green-500" />
                      )}
                    </div>
                    <div className="flex items-center">
                      <MapPin className="mr-1 h-4 w-4" />
                      {job.location}
                    </div>
                    <div className="flex items-center">
                      <Briefcase className="mr-1 h-4 w-4" />
                      {formatEmploymentType(job.employment_type)}
                    </div>
                    <div className="flex items-center">
                      <Target className="mr-1 h-4 w-4" />
                      {formatRemoteType(job.remote_type)}
                    </div>
                  </div>
                </CardDescription>
              </div>
              {job.company.logo_url && (
                <div className="ml-4">
                  <img
                    src={job.company.logo_url}
                    alt={`${job.company.name} logo`}
                    className="w-16 h-16 object-contain rounded"
                  />
                </div>
              )}
            </div>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between flex-wrap gap-4">
              <div className="flex items-center space-x-6 text-sm text-gray-600">
                <div className="flex items-center">
                  <DollarSign className="mr-1 h-4 w-4" />
                  {formatSalary(job.salary_min, job.salary_max)}
                </div>
                <div className="flex items-center">
                  <Calendar className="mr-1 h-4 w-4" />
                  Posted {formatDistanceToNow(new Date(job.posted_at), { addSuffix: true })}
                </div>
                {job.expires_at && (
                  <div className="flex items-center">
                    <Clock className="mr-1 h-4 w-4" />
                    Expires {format(new Date(job.expires_at), 'MMM dd, yyyy')}
                  </div>
                )}
              </div>              {job.apply_url && (
                <Button 
                  size="lg" 
                  onClick={() => window.open(job.apply_url!, '_blank', 'noopener,noreferrer')}
                  className="inline-flex items-center"
                >
                  Apply Now
                  <ExternalLink className="ml-2 h-4 w-4" />
                </Button>
              )}
            </div>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Job Description */}
            <Card>
              <CardHeader>
                <CardTitle>Job Description</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="prose prose-sm max-w-none">
                  <p className="whitespace-pre-wrap text-gray-700 leading-relaxed">
                    {job.description}
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Skills */}
            {job.skills && job.skills.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>Required Skills</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {job.skills.map((skill, index) => (
                      <Tag key={index} variant="outline">
                        {skill}
                      </Tag>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Company Information */}
            <Card>
              <CardHeader>
                <CardTitle>About {job.company.name}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {job.company.description && (
                    <p className="text-gray-700 leading-relaxed">
                      {job.company.description}
                    </p>
                  )}
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    {job.company.industry && (
                      <div>
                        <span className="font-medium text-gray-900">Industry:</span>
                        <span className="ml-2 text-gray-600">{job.company.industry}</span>
                      </div>
                    )}
                    
                    {job.company.size_category && (
                      <div>
                        <span className="font-medium text-gray-900">Company Size:</span>
                        <span className="ml-2 text-gray-600">
                          {formatCompanySize(job.company.size_category)}
                        </span>
                      </div>
                    )}
                    
                    {job.company.location && (
                      <div>
                        <span className="font-medium text-gray-900">Headquarters:</span>
                        <span className="ml-2 text-gray-600">{job.company.location}</span>
                      </div>
                    )}
                    
                    {job.company.founded_year && (
                      <div>
                        <span className="font-medium text-gray-900">Founded:</span>
                        <span className="ml-2 text-gray-600">{job.company.founded_year}</span>
                      </div>
                    )}
                  </div>                  {job.company.website && (
                    <div className="pt-2">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={() => window.open(job.company.website!, '_blank', 'noopener,noreferrer')}
                        className="inline-flex items-center"
                      >
                        <Globe className="mr-2 h-4 w-4" />
                        Visit Company Website
                        <ExternalLink className="ml-2 h-4 w-4" />
                      </Button>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Quick Apply */}
            {job.apply_url && (
              <Card>
                <CardHeader>
                  <CardTitle>Apply for this Job</CardTitle>
                </CardHeader>                <CardContent>
                  <Button 
                    size="lg" 
                    className="w-full" 
                    onClick={() => window.open(job.apply_url!, '_blank', 'noopener,noreferrer')}
                  >
                    <div className="inline-flex items-center justify-center">
                      Apply Now
                      <ExternalLink className="ml-2 h-4 w-4" />
                    </div>
                  </Button>
                  <p className="text-xs text-gray-500 mt-2 text-center">
                    You'll be redirected to the company's application page
                  </p>
                </CardContent>
              </Card>
            )}

            {/* Job Details Summary */}
            <Card>
              <CardHeader>
                <CardTitle>Job Details</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Employment Type:</span>
                    <span className="font-medium">{formatEmploymentType(job.employment_type)}</span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-gray-600">Work Setting:</span>
                    <span className="font-medium">{formatRemoteType(job.remote_type)}</span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-gray-600">Location:</span>
                    <span className="font-medium">{job.location}</span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-gray-600">Salary Range:</span>
                    <span className="font-medium">{formatSalary(job.salary_min, job.salary_max)}</span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-gray-600">Posted:</span>
                    <span className="font-medium">
                      {formatDistanceToNow(new Date(job.posted_at), { addSuffix: true })}
                    </span>
                  </div>
                  
                  {job.expires_at && (
                    <div className="flex justify-between">
                      <span className="text-gray-600">Expires:</span>
                      <span className="font-medium">
                        {format(new Date(job.expires_at), 'MMM dd, yyyy')}
                      </span>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Share Job */}
            <Card>
              <CardHeader>
                <CardTitle>Share this Job</CardTitle>
              </CardHeader>
              <CardContent>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="w-full"
                  onClick={() => navigator.clipboard.writeText(window.location.href)}
                >
                  Copy Job Link
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
