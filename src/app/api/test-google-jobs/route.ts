// Generated by Copilot
import { NextRequest, NextResponse } from 'next/server'
import UnifiedGoogleJobsScraper from '@/lib/scrapers/unified-google-jobs-scraper'

export async function GET(request: NextRequest) {
  try {
    console.log('ðŸš€ Testing Google Jobs Scrapers...')

    const scraper = new UnifiedGoogleJobsScraper()
    const results: any = {
      timestamp: new Date().toISOString(),
      tests: {}
    }

    // Test health check first
    console.log('1. Testing scraper health...')
    try {
      const health = await scraper.getScrapingHealth()
      results.tests.health = health
      console.log('Health check results:', health)
    } catch (error) {
      results.tests.health = { error: error instanceof Error ? error.message : 'Unknown error' }
    }

    // Test structured approach only (safer for testing)
    console.log('2. Testing structured approach...')
    try {
      const structuredJobs = await scraper.scrapeJobs({
        query: 'remote react developer',
        location: 'United States',
        maxPages: 1,
        usePuppeteer: false, // Disable for testing to avoid browser issues
        useStructured: true,
        maxResults: 5
      })
      
      results.tests.structured = {
        jobsFound: structuredJobs.length,
        sampleJob: structuredJobs[0] || null,
        jobs: structuredJobs.slice(0, 3) // Include first 3 jobs for review
      }
      
      console.log(`Structured approach found ${structuredJobs.length} jobs`)
    } catch (error) {
      results.tests.structured = { 
        error: error instanceof Error ? error.message : 'Unknown error',
        jobsFound: 0 
      }
    }

    // Test a simpler query approach
    console.log('3. Testing simple query...')
    try {
      const simpleJobs = await scraper.scrapeJobs({
        query: 'remote developer',
        location: 'US',
        maxPages: 1,
        usePuppeteer: false,
        useStructured: true,
        maxResults: 3
      })
      
      results.tests.simple = {
        jobsFound: simpleJobs.length,
        jobs: simpleJobs
      }
      
      console.log(`Simple query found ${simpleJobs.length} jobs`)
    } catch (error) {
      results.tests.simple = { 
        error: error instanceof Error ? error.message : 'Unknown error',
        jobsFound: 0 
      }
    }

    // Clean up
    await scraper.close()

    return NextResponse.json({
      success: true,
      message: 'Google Jobs scraper test completed',
      results,
      summary: {
        healthCheck: results.tests.health ? 'OK' : 'FAILED',
        structuredScraper: results.tests.structured?.jobsFound > 0 ? 'WORKING' : 'FAILED',
        simpleScraper: results.tests.simple?.jobsFound > 0 ? 'WORKING' : 'FAILED'
      }
    })

  } catch (error) {
    console.error('Test failed:', error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      message: 'Google Jobs scraper test failed'
    }, { status: 500 })
  }
}
