// Generated by Copilot
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

// Mock RSS feeds data (in a real app, this would come from database)
const RSS_FEEDS = [
  {
    name: 'RemoteOK',
    url: 'https://remoteok.io/remote-jobs.rss',
    enabled: true,
    description: 'Popular remote job board with tech-focused positions',
    status: 'success',
    jobsFound: 99,
    lastFetch: new Date().toISOString()
  },
  {
    name: 'WeWorkRemotely Programming', 
    url: 'https://weworkremotely.com/categories/remote-programming-jobs.rss',
    enabled: true,
    description: 'Programming jobs from WeWorkRemotely',
    status: 'error',
    error: 'Request failed with status code 403',
    jobsFound: 0,
    lastFetch: new Date().toISOString()
  },
  {
    name: 'Indeed Remote',
    url: 'https://www.indeed.com/rss?q=remote+developer&l=',
    enabled: true,
    description: 'Remote developer jobs from Indeed',
    status: 'error',
    error: 'Request failed with status code 404',
    jobsFound: 0,
    lastFetch: new Date().toISOString()
  },
  {
    name: 'FlexJobs',
    url: 'https://www.flexjobs.com/rss/remote-jobs', 
    enabled: false,
    description: 'FlexJobs remote positions (requires authentication)',
    status: 'pending',
    jobsFound: 0
  }
]

// Helper function to check if user is admin
async function isAdmin(supabase: ReturnType<typeof createClient>): Promise<boolean> {
  try {
    const { data: { user } } = await supabase.auth.getUser()
    
    if (!user) {
      return false
    }

    const { data, error } = await supabase
      .from('user_profiles')
      .select('is_admin')
      .eq('user_id', user.id)
      .single()

    if (error || !data) {
      return false
    }

    return data.is_admin === true
  } catch (error) {
    console.error('Admin check error:', error)
    return false
  }
}

// GET - Load RSS feeds configuration
export async function GET() {
  try {
    const supabase = createClient()
    
    // Check if user is authenticated and is admin
    const adminCheck = await isAdmin(supabase)
    if (!adminCheck) {
      return NextResponse.json(
        { error: 'Unauthorized. Admin access required.' },
        { status: 401 }
      )
    }

    return NextResponse.json({
      success: true,
      feeds: RSS_FEEDS
    })

  } catch (error) {
    console.error('RSS feeds fetch error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error' 
      },
      { status: 500 }
    )
  }
}

// PUT - Update RSS feed configuration
export async function PUT(request: NextRequest) {
  try {
    const supabase = createClient()
    
    // Check if user is authenticated and is admin
    const adminCheck = await isAdmin(supabase)
    if (!adminCheck) {
      return NextResponse.json(
        { error: 'Unauthorized. Admin access required.' },
        { status: 401 }
      )
    }

    const { feedName, enabled } = await request.json()

    if (!feedName || typeof enabled !== 'boolean') {
      return NextResponse.json(
        { error: 'Missing feedName or enabled parameter' },
        { status: 400 }
      )
    }

    // Find and update the feed
    const feedIndex = RSS_FEEDS.findIndex(feed => feed.name === feedName)
    if (feedIndex === -1) {
      return NextResponse.json(
        { error: 'RSS feed not found' },
        { status: 404 }
      )
    }

    RSS_FEEDS[feedIndex].enabled = enabled

    // In a real app, you would save this to the database
    // For now, we'll just update the in-memory array

    return NextResponse.json({
      success: true,
      message: `RSS feed ${feedName} ${enabled ? 'enabled' : 'disabled'}`
    })

  } catch (error) {
    console.error('RSS feed update error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error' 
      },
      { status: 500 }
    )
  }
}
