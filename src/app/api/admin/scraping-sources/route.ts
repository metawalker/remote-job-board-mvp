// Generated by Copilot
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

// Helper function to check if user is admin
async function isAdmin(supabase: ReturnType<typeof createClient>): Promise<boolean> {
  try {
    const { data: { user } } = await supabase.auth.getUser()
    
    if (!user) {
      return false
    }

    const { data, error } = await supabase
      .from('user_profiles')
      .select('is_admin')
      .eq('user_id', user.id)
      .single()

    if (error || !data) {
      return false
    }

    return data.is_admin === true
  } catch (error) {
    console.error('Admin check error:', error)
    return false
  }
}

// GET - Load scraping sources
export async function GET() {
  try {
    const supabase = createClient()
    
    // Check if user is authenticated and is admin
    const adminCheck = await isAdmin(supabase)
    if (!adminCheck) {
      return NextResponse.json(
        { error: 'Unauthorized. Admin access required.' },
        { status: 401 }
      )
    }

    // Get sources from scraping_sources table
    const { data: sourcesData, error: sourcesError } = await supabase
      .from('scraping_sources')
      .select('id, name, url, enabled, description, priority, last_scraped_at, total_jobs_found, success_rate, created_at, updated_at')
      .order('priority', { ascending: false })

    let sources = []
    
    if (sourcesError || !sourcesData || sourcesData.length === 0) {
      // Return default sources if table doesn't exist or is empty
      sources = [
        {
          id: 'ycombinator',
          name: 'YCombinator Jobs',
          url: 'https://www.ycombinator.com/jobs/search?remote=true',
          enabled: true,
          description: 'Remote jobs from Y Combinator startups'
        },
        {
          id: 'weworkremotely',
          name: 'We Work Remotely',
          url: 'https://weworkremotely.com/remote-jobs',
          enabled: true,
          description: 'Popular remote work job board'
        },
        {
          id: 'remoteok',
          name: 'Remote OK',
          url: 'https://remoteok.io/remote-jobs',
          enabled: false,
          description: 'Tech remote jobs aggregator'
        }
      ]
    } else {
      // Transform database format to frontend format
      sources = sourcesData.map((source: any) => ({
        id: source.id,
        name: source.name,
        url: source.url,
        enabled: source.enabled,
        description: source.description || '',
        priority: source.priority,
        lastScrapedAt: source.last_scraped_at,
        totalJobsFound: source.total_jobs_found,
        successRate: source.success_rate,
        createdAt: source.created_at,
        updatedAt: source.updated_at
      }))
    }

    return NextResponse.json({
      success: true,
      sources: sources
    })

  } catch (error) {
    console.error('Sources fetch error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error' 
      },
      { status: 500 }
    )
  }
}

// POST - Add new scraping source
export async function POST(request: NextRequest) {
  try {
    const supabase = createClient()
    
    // Check if user is authenticated and is admin
    const adminCheck = await isAdmin(supabase)
    if (!adminCheck) {
      return NextResponse.json(
        { error: 'Unauthorized. Admin access required.' },
        { status: 401 }
      )
    }

    const { source } = await request.json()

    if (!source || !source.name || !source.url) {
      return NextResponse.json(
        { error: 'Source name and URL are required' },
        { status: 400 }
      )
    }

    // Get current user
    const { data: { user } } = await supabase.auth.getUser()

    // Insert new source into scraping_sources table
    const { data: newSource, error: insertError } = await supabase
      .from('scraping_sources')
      .insert({
        name: source.name,
        url: source.url,
        enabled: source.enabled || false,
        description: source.description || '',
        priority: source.priority || 'medium',
        created_by: user?.id,
        updated_by: user?.id
      })
      .select()
      .single()

    if (insertError) {
      console.error('Source insert error:', insertError)
      return NextResponse.json(
        { 
          success: false, 
          error: 'Failed to save source' 
        },
        { status: 500 }
      )
    }

    return NextResponse.json({
      success: true,
      message: 'Source added successfully',
      source: {
        id: newSource.id,
        name: newSource.name,
        url: newSource.url,
        enabled: newSource.enabled,
        description: newSource.description,
        priority: newSource.priority
      }
    })

  } catch (error) {
    console.error('Source add error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error' 
      },
      { status: 500 }
    )
  }
}

// PUT - Update scraping source
export async function PUT(request: NextRequest) {
  try {
    const supabase = createClient()
    
    // Check if user is authenticated and is admin
    const adminCheck = await isAdmin(supabase)
    if (!adminCheck) {
      return NextResponse.json(
        { error: 'Unauthorized. Admin access required.' },
        { status: 401 }
      )
    }

    const { id, source } = await request.json()

    if (!id || !source || !source.name || !source.url) {
      return NextResponse.json(
        { error: 'Source ID, name and URL are required' },
        { status: 400 }
      )
    }

    // Get current user
    const { data: { user } } = await supabase.auth.getUser()

    // Update source in scraping_sources table
    const { data: updatedSource, error: updateError } = await supabase
      .from('scraping_sources')
      .update({
        name: source.name,
        url: source.url,
        enabled: source.enabled,
        description: source.description || '',
        priority: source.priority || 'medium',
        updated_by: user?.id
      })
      .eq('id', id)
      .select()
      .single()

    if (updateError) {
      console.error('Source update error:', updateError)
      return NextResponse.json(
        { 
          success: false, 
          error: 'Failed to update source' 
        },
        { status: 500 }
      )
    }

    return NextResponse.json({
      success: true,
      message: 'Source updated successfully',
      source: {
        id: updatedSource.id,
        name: updatedSource.name,
        url: updatedSource.url,
        enabled: updatedSource.enabled,
        description: updatedSource.description,
        priority: updatedSource.priority
      }
    })

  } catch (error) {
    console.error('Source update error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error' 
      },
      { status: 500 }
    )
  }
}

// DELETE - Delete scraping source
export async function DELETE(request: NextRequest) {
  try {
    const supabase = createClient()
    
    // Check if user is authenticated and is admin
    const adminCheck = await isAdmin(supabase)
    if (!adminCheck) {
      return NextResponse.json(
        { error: 'Unauthorized. Admin access required.' },
        { status: 401 }
      )
    }

    const { id } = await request.json()

    if (!id) {
      return NextResponse.json(
        { error: 'Source ID is required' },
        { status: 400 }
      )
    }

    // Delete source from scraping_sources table
    const { error: deleteError } = await supabase
      .from('scraping_sources')
      .delete()
      .eq('id', id)

    if (deleteError) {
      console.error('Source delete error:', deleteError)
      return NextResponse.json(
        { 
          success: false, 
          error: 'Failed to delete source' 
        },
        { status: 500 }
      )
    }

    return NextResponse.json({
      success: true,
      message: 'Source deleted successfully'
    })

  } catch (error) {
    console.error('Source delete error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error' 
      },
      { status: 500 }
    )
  }
}
