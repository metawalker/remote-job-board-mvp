// Generated by Copilot
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

// Helper function to check if user is admin
async function isAdmin(supabase: ReturnType<typeof createClient>): Promise<boolean> {
  try {
    const { data: { user } } = await supabase.auth.getUser()
    
    if (!user) {
      return false
    }

    const { data, error } = await supabase
      .from('user_profiles')
      .select('is_admin')
      .eq('user_id', user.id)
      .single()

    if (error || !data) {
      return false
    }

    return data.is_admin === true
  } catch (error) {
    console.error('Admin check error:', error)
    return false
  }
}

// GET - Load admin settings
export async function GET() {
  try {
    const supabase = createClient()
    
    // Check if user is authenticated and is admin
    const adminCheck = await isAdmin(supabase)
    if (!adminCheck) {
      return NextResponse.json(
        { error: 'Unauthorized. Admin access required.' },
        { status: 401 }
      )
    }

    // Try to get settings from database (you can store in a settings table)
    // For now, return default settings
    const defaultSettings = {
      sources: [
        {
          id: 'ycombinator',
          name: 'YCombinator Jobs',
          url: 'https://www.ycombinator.com/jobs/search?remote=true',
          enabled: true,
          description: 'Remote jobs from Y Combinator startups'
        },
        {
          id: 'weworkremotely',
          name: 'We Work Remotely',
          url: 'https://weworkremotely.com/remote-jobs',
          enabled: true,
          description: 'Popular remote work job board'
        },
        {
          id: 'google',
          name: 'Google Careers',
          url: 'https://careers.google.com/jobs/results/',
          enabled: true,
          description: 'Google job postings with remote options'
        }
      ],
      schedule: {
        enabled: false,
        interval: 'daily',
        time: '09:00',
        timezone: 'UTC'
      },
      notifications: {
        email: false,
        slack: false,
        webhookUrl: ''
      },
      limits: {
        maxJobsPerRun: 100,
        cooldownMinutes: 60
      }
    }

    return NextResponse.json({
      success: true,
      settings: defaultSettings
    })

  } catch (error) {
    console.error('Settings fetch error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error' 
      },
      { status: 500 }
    )
  }
}

// POST - Save admin settings
export async function POST(request: NextRequest) {
  try {
    const supabase = createClient()
    
    // Check if user is authenticated and is admin
    const adminCheck = await isAdmin(supabase)
    if (!adminCheck) {
      return NextResponse.json(
        { error: 'Unauthorized. Admin access required.' },
        { status: 401 }
      )
    }

    const { settings } = await request.json()

    if (!settings) {
      return NextResponse.json(
        { error: 'Settings data required' },
        { status: 400 }
      )
    }

    // TODO: Save settings to database
    // For now, just return success
    // You could create an admin_settings table to store these
    
    return NextResponse.json({
      success: true,
      message: 'Settings saved successfully'
    })

  } catch (error) {
    console.error('Settings save error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error' 
      },
      { status: 500 }
    )
  }
}
