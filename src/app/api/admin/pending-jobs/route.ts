// Generated by Copilot
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

// Helper function to check if user is admin
async function isAdmin(supabase: ReturnType<typeof createClient>): Promise<boolean> {
  try {
    const { data: { user }, error } = await supabase.auth.getUser()
    
    if (error || !user) {
      return false
    }

    const { data, error: profileError } = await supabase
      .from('user_profiles')
      .select('is_admin')
      .eq('user_id', user.id)
      .single()

    if (profileError || !data) {
      return false
    }

    return data.is_admin === true
  } catch {
    return false
  }
}

export async function GET(request: NextRequest) {
  try {
    const supabase = createClient()
    
    // Check if user is authenticated and is admin
    const adminCheck = await isAdmin(supabase)
    if (!adminCheck) {
      return NextResponse.json(
        { error: 'Unauthorized. Admin access required.' },
        { status: 401 }
      )
    }

    // Get pending jobs (is_active = false) with company information
    const { data: pendingJobs, error } = await supabase
      .from('jobs')
      .select(`
        id,
        title,
        description,
        location,
        salary_min,
        salary_max,
        employment_type,
        remote_type,
        skills,
        apply_url,
        posted_at,
        created_at,
        companies (
          id,
          name,
          website,
          is_verified
        )
      `)
      .eq('is_active', false)
      .order('created_at', { ascending: false })

    if (error) {
      console.error('Error fetching pending jobs:', error)
      return NextResponse.json(
        { error: 'Failed to fetch pending jobs' },
        { status: 500 }
      )
    }

    return NextResponse.json({
      success: true,
      jobs: pendingJobs || [],
      count: pendingJobs?.length || 0
    })

  } catch (error) {
    console.error('Admin API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
