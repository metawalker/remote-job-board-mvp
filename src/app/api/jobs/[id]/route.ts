// Generated by Copilot
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = createClient()
    const { id } = params

    // Validate that id is provided and is a valid UUID format
    if (!id || !id.trim()) {
      return NextResponse.json(
        { error: 'Job ID is required' },
        { status: 400 }
      )
    }

    // Query the job with company data
    const { data: job, error } = await supabase
      .from('jobs')
      .select(`
        id,
        title,
        description,
        location,
        salary_min,
        salary_max,
        employment_type,
        remote_type,
        skills,
        apply_url,
        posted_at,
        expires_at,
        is_active,
        companies (
          id,
          name,
          description,
          website,
          logo_url,
          industry,
          size_category,
          location,
          is_verified
        )
      `)
      .eq('id', id)
      .eq('is_active', true) // Only return active jobs
      .single()

    if (error) {
      console.error('Error fetching job:', error)
      
      // Check if it's a "not found" error
      if (error.code === 'PGRST116') {
        return NextResponse.json(
          { error: 'Job not found' },
          { status: 404 }
        )
      }
      
      return NextResponse.json(
        { error: 'Failed to fetch job', details: error.message },
        { status: 500 }
      )
    }

    // If no job is found (shouldn't happen with .single() but safety check)
    if (!job) {
      return NextResponse.json(
        { error: 'Job not found' },
        { status: 404 }
      )
    }

    // Transform the data to include company information at the job level
    const transformedJob = {
      id: job.id,
      title: job.title,
      description: job.description,
      location: job.location,
      salary_min: job.salary_min,
      salary_max: job.salary_max,
      employment_type: job.employment_type,
      remote_type: job.remote_type,
      skills: job.skills || [],
      apply_url: job.apply_url,
      posted_at: job.posted_at,
      expires_at: job.expires_at,
      is_active: job.is_active,
      company: job.companies
    }

    return NextResponse.json({
      job: transformedJob
    })

  } catch (error) {
    console.error('Job details API error:', error)
    return NextResponse.json(
      { 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}
