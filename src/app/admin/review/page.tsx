// Generated by Copilot
'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { useAdmin } from '@/lib/supabase/admin-hooks'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Tag } from '@/components/ui/tag'

export default function AdminReviewPage() {
  const router = useRouter()
  const {
    isAdmin,
    isLoading,
    pendingJobs,
    pendingJobsLoading,
    fetchPendingJobs,
    approveJob,
    rejectJob
  } = useAdmin()

  const [processingJobs, setProcessingJobs] = useState<Set<string>>(new Set())

  // Redirect if not admin
  useEffect(() => {
    if (!isLoading && !isAdmin) {
      router.push('/')
    }
  }, [isAdmin, isLoading, router])

  // Fetch pending jobs on mount
  useEffect(() => {
    if (isAdmin) {
      fetchPendingJobs()
    }
  }, [isAdmin, fetchPendingJobs])

  const handleApprove = async (jobId: string) => {
    if (processingJobs.has(jobId)) return

    setProcessingJobs(prev => new Set([...prev, jobId]))
    
    const success = await approveJob(jobId)
    
    if (!success) {
      alert('Failed to approve job. Please try again.')
    }
    
    setProcessingJobs(prev => {
      const next = new Set(prev)
      next.delete(jobId)
      return next
    })
  }

  const handleReject = async (jobId: string) => {
    if (processingJobs.has(jobId)) return

    const confirmed = confirm('Are you sure you want to reject and delete this job? This action cannot be undone.')
    if (!confirmed) return

    setProcessingJobs(prev => new Set([...prev, jobId]))
    
    const success = await rejectJob(jobId)
    
    if (!success) {
      alert('Failed to reject job. Please try again.')
    }
    
    setProcessingJobs(prev => {
      const next = new Set(prev)
      next.delete(jobId)
      return next
    })
  }

  const formatSalary = (min: number | null, max: number | null) => {
    if (!min && !max) return 'Not specified'
    if (min && max) return `$${min.toLocaleString()} - $${max.toLocaleString()}`
    if (min) return `$${min.toLocaleString()}+`
    if (max) return `Up to $${max.toLocaleString()}`
    return 'Not specified'
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Checking admin permissions...</p>
        </div>
      </div>
    )
  }

  // Not admin
  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Access Denied</h1>
          <p className="text-gray-600 mb-4">You don't have admin permissions to access this page.</p>
          <Button onClick={() => router.push('/')}>Go Back Home</Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Admin Review Dashboard</h1>
              <p className="mt-2 text-gray-600">
                Review and approve scraped job listings before they go live
              </p>
            </div>
            <div className="flex gap-4">
              <Button
                onClick={fetchPendingJobs}
                disabled={pendingJobsLoading}
                variant="outline"
              >
                {pendingJobsLoading ? 'Refreshing...' : 'Refresh'}
              </Button>
              <Button onClick={() => router.push('/')}>
                Back to Site
              </Button>
            </div>
          </div>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Card className="p-6">
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-600">
                {pendingJobsLoading ? '...' : pendingJobs.length}
              </div>
              <div className="text-sm text-gray-600 mt-1">Pending Jobs</div>
            </div>
          </Card>
          <Card className="p-6">
            <div className="text-center">
              <div className="text-3xl font-bold text-green-600">
                {pendingJobsLoading ? '...' : pendingJobs.filter(job => job.companies.is_verified).length}
              </div>
              <div className="text-sm text-gray-600 mt-1">From Verified Companies</div>
            </div>
          </Card>
          <Card className="p-6">
            <div className="text-center">
              <div className="text-3xl font-bold text-purple-600">
                {pendingJobsLoading ? '...' : new Set(pendingJobs.map(job => job.companies.name)).size}
              </div>
              <div className="text-sm text-gray-600 mt-1">Unique Companies</div>
            </div>
          </Card>
        </div>

        {/* Pending Jobs List */}
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold text-gray-900">
              Pending Job Reviews
            </h2>
            {pendingJobs.length > 0 && (
              <p className="text-sm text-gray-600">
                {pendingJobs.length} job{pendingJobs.length !== 1 ? 's' : ''} awaiting review
              </p>
            )}
          </div>

          {pendingJobsLoading ? (
            <div className="flex justify-center py-12">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            </div>
          ) : pendingJobs.length === 0 ? (
            <Card className="p-12 text-center">
              <div className="text-gray-400 mb-2">
                <svg className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">No Pending Jobs</h3>
              <p className="text-gray-600">All jobs have been reviewed. Check back later or run the scraper to find new jobs.</p>
            </Card>
          ) : (
            <div className="space-y-4">
              {pendingJobs.map((job) => (
                <Card key={job.id} className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      {/* Job Header */}
                      <div className="flex items-start justify-between mb-4">
                        <div>
                          <h3 className="text-lg font-semibold text-gray-900 mb-1">
                            {job.title}
                          </h3>
                          <div className="flex items-center gap-2 mb-2">
                            <span className="text-gray-700 font-medium">
                              {job.companies.name}
                            </span>
                            {job.companies.is_verified && (
                              <Tag variant="success" size="sm">Verified</Tag>
                            )}
                            {job.companies.website && (
                              <a
                                href={job.companies.website}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-blue-600 hover:text-blue-800 text-sm"
                              >
                                Website â†—
                              </a>
                            )}
                          </div>
                        </div>
                        <div className="text-sm text-gray-500">
                          Scraped: {formatDate(job.created_at)}
                        </div>
                      </div>

                      {/* Job Details */}
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                        <div>
                          <span className="text-sm text-gray-600">Location:</span>
                          <p className="font-medium">{job.location}</p>
                        </div>
                        <div>
                          <span className="text-sm text-gray-600">Type:</span>
                          <p className="font-medium capitalize">{job.employment_type}</p>
                        </div>
                        <div>
                          <span className="text-sm text-gray-600">Remote:</span>
                          <p className="font-medium capitalize">{job.remote_type}</p>
                        </div>
                        <div>
                          <span className="text-sm text-gray-600">Salary:</span>
                          <p className="font-medium">{formatSalary(job.salary_min, job.salary_max)}</p>
                        </div>
                      </div>

                      {/* Skills */}
                      {job.skills && job.skills.length > 0 && (
                        <div className="mb-4">
                          <span className="text-sm text-gray-600 block mb-2">Skills:</span>
                          <div className="flex flex-wrap gap-2">
                            {job.skills.map((skill, index) => (
                              <Tag key={index} variant="secondary" size="sm">
                                {skill}
                              </Tag>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Description Preview */}
                      <div className="mb-4">
                        <span className="text-sm text-gray-600 block mb-2">Description:</span>
                        <p className="text-gray-700 text-sm line-clamp-3">
                          {job.description}
                        </p>
                      </div>

                      {/* Apply URL */}
                      {job.apply_url && (
                        <div className="mb-4">
                          <a
                            href={job.apply_url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="inline-flex items-center text-blue-600 hover:text-blue-800 text-sm"
                          >
                            View Original Job Posting â†—
                          </a>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex items-center justify-end gap-3 pt-4 border-t">
                    <Button
                      onClick={() => handleReject(job.id)}
                      disabled={processingJobs.has(job.id)}
                      variant="outline"
                      className="text-red-600 border-red-300 hover:bg-red-50"
                    >
                      {processingJobs.has(job.id) ? 'Processing...' : 'Reject'}
                    </Button>
                    <Button
                      onClick={() => handleApprove(job.id)}
                      disabled={processingJobs.has(job.id)}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      {processingJobs.has(job.id) ? 'Processing...' : 'Approve'}
                    </Button>
                  </div>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
