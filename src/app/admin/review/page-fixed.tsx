// Generated by Copilot
'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { useAdmin } from '@/lib/supabase/admin-hooks'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Tag } from '@/components/ui/tag'

export default function AdminReviewPage() {
  const router = useRouter()
  const {
    isAdmin,
    isLoading,
    pendingJobs,
    pendingJobsLoading,
    fetchPendingJobs,
    approveJob,
    rejectJob
  } = useAdmin()
  
  const [processingJobs, setProcessingJobs] = useState<Set<string>>(new Set())

  useEffect(() => {
    if (isAdmin) {
      fetchPendingJobs()
    }
  }, [isAdmin, fetchPendingJobs])

  const handleApprove = async (jobId: string) => {
    setProcessingJobs(prev => new Set(prev).add(jobId))
    
    try {
      await approveJob(jobId)
      await fetchPendingJobs() // Refresh the list
    } catch (error) {
      console.error('Error approving job:', error)
    } finally {
      setProcessingJobs(prev => {
        const next = new Set(prev)
        next.delete(jobId)
        return next
      })
    }
  }

  const handleReject = async (jobId: string) => {
    setProcessingJobs(prev => new Set(prev).add(jobId))
    
    try {
      await rejectJob(jobId)
      await fetchPendingJobs() // Refresh the list
    } catch (error) {
      console.error('Error rejecting job:', error)
    } finally {
      setProcessingJobs(prev => {
        const next = new Set(prev)
        next.delete(jobId)
        return next
      })
    }
  }

  const formatSalary = (min: number | null, max: number | null) => {
    if (!min && !max) return 'Not specified'
    if (min && max) return `$${min.toLocaleString()} - $${max.toLocaleString()}`
    if (min) return `$${min.toLocaleString()}+`
    if (max) return `Up to $${max.toLocaleString()}`
    return 'Not specified'
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Checking admin permissions...</p>
        </div>
      </div>
    )
  }

  // Not admin
  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Access Denied</h1>
          <p className="text-gray-600 mb-4">You don&apos;t have admin permissions to access this page.</p>
          <Button onClick={() => router.push('/')}>Go Back Home</Button>
        </div>
      </div>
    )
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Job Review</h1>
            <p className="mt-2 text-gray-600">
              Review and approve scraped job listings before they go live
            </p>
          </div>
          <div className="flex gap-4">
            <Button
              onClick={fetchPendingJobs}
              disabled={pendingJobsLoading}
              variant="outline"
            >
              {pendingJobsLoading ? 'Refreshing...' : 'Refresh'}
            </Button>
          </div>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <Card className="p-6">
          <div className="text-center">
            <div className="text-3xl font-bold text-blue-600">
              {pendingJobsLoading ? '...' : pendingJobs.length}
            </div>
            <div className="text-sm text-gray-600">Pending Jobs</div>
          </div>
        </Card>
        <Card className="p-6">
          <div className="text-center">
            <div className="text-3xl font-bold text-green-600">
              {pendingJobsLoading ? '...' : pendingJobs.filter(job => job.companies.is_verified).length}
            </div>
            <div className="text-sm text-gray-600">Verified Companies</div>
          </div>
        </Card>
        <Card className="p-6">
          <div className="text-center">
            <div className="text-3xl font-bold text-purple-600">
              {pendingJobsLoading ? '...' : new Set(pendingJobs.map(job => job.companies.name)).size}
            </div>
            <div className="text-sm text-gray-600">Unique Companies</div>
          </div>
        </Card>
      </div>

      {/* Jobs List */}
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-semibold text-gray-900">Pending Jobs</h2>
          {pendingJobs.length > 0 && (
            <div className="text-sm text-gray-600">
              {pendingJobs.length} job{pendingJobs.length !== 1 ? 's' : ''} awaiting review
            </div>
          )}
        </div>

        <div className="space-y-6">
          {pendingJobsLoading ? (
            <div className="flex justify-center py-12">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            </div>
          ) : pendingJobs.length === 0 ? (
            <Card className="p-8">
              <div className="text-center">
                <div className="text-gray-400 text-6xl mb-4">ðŸ“‹</div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">No pending jobs</h3>
                <p className="text-gray-600 mb-4">
                  All jobs have been reviewed. Run the scraper to find new opportunities.
                </p>
                <Button onClick={fetchPendingJobs} variant="outline">
                  Check Again
                </Button>
              </div>
            </Card>
          ) : (
            <div className="space-y-6">
              {pendingJobs.map((job) => (
                <Card key={job.id} className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex-1">
                          <h3 className="text-lg font-semibold text-gray-900 mb-1">
                            {job.title}
                          </h3>
                          <div className="flex items-center gap-2 mb-2">
                            <span className="text-gray-700 font-medium">
                              {job.companies.name}
                            </span>
                            {job.companies.is_verified && (
                              <Tag variant="default">Verified</Tag>
                            )}
                            {job.companies.website && (
                              <a
                                href={job.companies.website}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-blue-600 hover:text-blue-800 text-sm"
                              >
                                Website â†—
                              </a>
                            )}
                          </div>
                        </div>
                        <div className="text-sm text-gray-500">
                          Scraped: {formatDate(job.created_at)}
                        </div>
                      </div>

                      {/* Job Details */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                          <div className="text-sm text-gray-600 mb-1">Location</div>
                          <div className="font-medium">{job.location || 'Remote'}</div>
                        </div>                        <div>
                          <div className="text-sm text-gray-600 mb-1">Job Type</div>
                          <div className="font-medium">{job.employment_type || 'Not specified'}</div>
                        </div>
                        <div>
                          <div className="text-sm text-gray-600 mb-1">Salary</div>
                          <div className="font-medium">{formatSalary(job.salary_min, job.salary_max)}</div>
                        </div>                        <div>
                          <div className="text-sm text-gray-600 mb-1">Apply URL</div>
                          <a
                            href={job.apply_url || '#'}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-blue-600 hover:text-blue-800 text-sm"
                          >
                            View Original â†—
                          </a>
                        </div>
                      </div>

                      {/* Description */}
                      {job.description && (
                        <div className="mb-4">
                          <div className="text-sm text-gray-600 mb-1">Description</div>
                          <div className="text-sm text-gray-700 line-clamp-3">
                            {job.description}
                          </div>
                        </div>
                      )}

                      {/* Skills */}
                      {job.skills && job.skills.length > 0 && (
                        <div className="mb-4">
                          <div className="text-sm text-gray-600 mb-2">Required Skills</div>
                          <div className="flex flex-wrap gap-2">
                            {job.skills.map((skill, index) => (
                              <Tag key={index} variant="secondary">
                                {skill}
                              </Tag>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex items-center justify-end gap-3 pt-4 border-t">
                    <Button
                      onClick={() => handleReject(job.id)}
                      disabled={processingJobs.has(job.id)}
                      variant="outline"
                      className="text-red-600 border-red-300 hover:bg-red-50"
                    >
                      {processingJobs.has(job.id) ? 'Processing...' : 'Reject'}
                    </Button>
                    <Button
                      onClick={() => handleApprove(job.id)}
                      disabled={processingJobs.has(job.id)}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      {processingJobs.has(job.id) ? 'Processing...' : 'Approve'}
                    </Button>
                  </div>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
