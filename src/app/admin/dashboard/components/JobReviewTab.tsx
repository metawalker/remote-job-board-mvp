// Generated by Copilot
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Tag } from '@/components/ui/tag'

interface PendingJob {
  id: string
  title: string
  description: string
  location: string
  salary_min: number | null
  salary_max: number | null
  employment_type: string
  remote_type: string
  skills: string[]
  apply_url: string | null
  posted_at: string
  created_at: string
  companies: {
    id: string
    name: string
    website: string | null
    is_verified: boolean
  }
}

interface JobReviewTabProps {
  pendingJobs: PendingJob[]
  pendingJobsLoading: boolean
  onApprove: (jobId: string) => Promise<boolean>
  onReject: (jobId: string) => Promise<boolean>
  onRefresh: () => Promise<void>
}

export default function JobReviewTab({
  pendingJobs,
  pendingJobsLoading,
  onApprove,
  onReject,
  onRefresh
}: JobReviewTabProps) {
  const [processingJobs, setProcessingJobs] = useState<Set<string>>(new Set())
  const [selectedJobs, setSelectedJobs] = useState<Set<string>>(new Set())

  const handleApprove = async (jobId: string) => {
    if (processingJobs.has(jobId)) return

    setProcessingJobs(prev => new Set(Array.from(prev).concat(jobId)))
    
    const success = await onApprove(jobId)
    
    if (!success) {
      alert('Failed to approve job. Please try again.')
    }
    
    setProcessingJobs(prev => {
      const next = new Set(prev)
      next.delete(jobId)
      return next
    })
  }

  const handleReject = async (jobId: string) => {
    if (processingJobs.has(jobId)) return

    const confirmed = confirm('Are you sure you want to reject and delete this job? This action cannot be undone.')
    if (!confirmed) return

    setProcessingJobs(prev => new Set(Array.from(prev).concat(jobId)))
    
    const success = await onReject(jobId)
    
    if (!success) {
      alert('Failed to reject job. Please try again.')
    }
    
    setProcessingJobs(prev => {
      const next = new Set(prev)
      next.delete(jobId)
      return next
    })
  }
  const handleBulkAction = async (action: 'approve' | 'reject') => {
    if (selectedJobs.size === 0) return

    const confirmed = action === 'reject' 
      ? confirm(`Are you sure you want to reject ${selectedJobs.size} jobs? This action cannot be undone.`)
      : confirm(`Are you sure you want to approve ${selectedJobs.size} jobs?`)

    if (!confirmed) return

    const jobIds = Array.from(selectedJobs)
    setProcessingJobs(prev => {
      const newSet = new Set(prev)
      jobIds.forEach(id => newSet.add(id))
      return newSet
    })

    for (const jobId of jobIds) {
      if (action === 'approve') {
        await onApprove(jobId)
      } else {
        await onReject(jobId)
      }
    }

    setSelectedJobs(new Set())
    setProcessingJobs(new Set())
  }

  const toggleJobSelection = (jobId: string) => {
    setSelectedJobs(prev => {
      const next = new Set(prev)
      if (next.has(jobId)) {
        next.delete(jobId)
      } else {
        next.add(jobId)
      }
      return next
    })
  }

  const formatSalary = (min: number | null, max: number | null) => {
    if (!min && !max) return 'Not specified'
    if (min && max) return `$${min.toLocaleString()} - $${max.toLocaleString()}`
    if (min) return `$${min.toLocaleString()}+`
    if (max) return `Up to $${max.toLocaleString()}`
    return 'Not specified'
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return (
    <div className="space-y-6">
      {/* Header with bulk actions */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-xl font-semibold text-gray-900">
            Pending Job Reviews
          </h2>
          <p className="text-sm text-gray-600">
            {pendingJobs.length} job{pendingJobs.length !== 1 ? 's' : ''} awaiting review
          </p>
        </div>

        <div className="flex items-center gap-3">
          {selectedJobs.size > 0 && (
            <>
              <span className="text-sm text-gray-600">
                {selectedJobs.size} selected
              </span>
              <Button
                size="sm"
                variant="outline"
                onClick={() => handleBulkAction('approve')}
                className="bg-green-50 border-green-300 text-green-700 hover:bg-green-100"
              >
                Approve Selected
              </Button>
              <Button
                size="sm"
                variant="outline"
                onClick={() => handleBulkAction('reject')}
                className="bg-red-50 border-red-300 text-red-700 hover:bg-red-100"
              >
                Reject Selected
              </Button>
            </>
          )}
          <Button
            onClick={onRefresh}
            disabled={pendingJobsLoading}
            variant="outline"
          >
            {pendingJobsLoading ? 'Refreshing...' : 'Refresh'}
          </Button>
        </div>
      </div>

      {/* Jobs List */}
      {pendingJobsLoading ? (
        <div className="flex justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      ) : pendingJobs.length === 0 ? (
        <Card className="p-12 text-center">
          <div className="text-gray-400 mb-2">
            <svg className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">No Pending Jobs</h3>
          <p className="text-gray-600">All jobs have been reviewed. Run the scraper to find new jobs.</p>
        </Card>
      ) : (
        <div className="space-y-4">
          {pendingJobs.map((job) => (
            <Card key={job.id} className="p-6">
              <div className="flex items-start gap-4">
                {/* Selection checkbox */}
                <input
                  type="checkbox"
                  checked={selectedJobs.has(job.id)}
                  onChange={() => toggleJobSelection(job.id)}
                  className="mt-1 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />

                <div className="flex-1">
                  {/* Job Header */}
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900 mb-1">
                        {job.title}
                      </h3>
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-gray-700 font-medium">
                          {job.companies.name}
                        </span>
                        {job.companies.is_verified && (
                          <Tag variant="default">Verified</Tag>
                        )}
                        {job.companies.website && (
                          <a
                            href={job.companies.website}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-blue-600 hover:text-blue-800 text-sm"
                          >
                            Website â†—
                          </a>
                        )}
                      </div>
                    </div>
                    <div className="text-sm text-gray-500">
                      Scraped: {formatDate(job.created_at)}
                    </div>
                  </div>

                  {/* Job Details */}
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                    <div>
                      <span className="text-sm text-gray-600">Location:</span>
                      <p className="font-medium">{job.location}</p>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Type:</span>
                      <p className="font-medium capitalize">{job.employment_type}</p>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Remote:</span>
                      <p className="font-medium capitalize">{job.remote_type}</p>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Salary:</span>
                      <p className="font-medium">{formatSalary(job.salary_min, job.salary_max)}</p>
                    </div>
                  </div>

                  {/* Skills */}
                  {job.skills && job.skills.length > 0 && (
                    <div className="mb-4">
                      <span className="text-sm text-gray-600 block mb-2">Skills:</span>
                      <div className="flex flex-wrap gap-2">
                        {job.skills.map((skill, index) => (
                          <Tag key={index} variant="secondary">
                            {skill}
                          </Tag>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Description Preview */}
                  <div className="mb-4">
                    <span className="text-sm text-gray-600 block mb-2">Description:</span>
                    <p className="text-gray-700 text-sm line-clamp-3">
                      {job.description}
                    </p>
                  </div>

                  {/* Apply URL */}
                  {job.apply_url && (
                    <div className="mb-4">
                      <a
                        href={job.apply_url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center text-blue-600 hover:text-blue-800 text-sm"
                      >
                        View Original Job Posting â†—
                      </a>
                    </div>
                  )}

                  {/* Action Buttons */}
                  <div className="flex items-center justify-end gap-3 pt-4 border-t">
                    <Button
                      onClick={() => handleReject(job.id)}
                      disabled={processingJobs.has(job.id)}
                      variant="outline"
                      className="text-red-600 border-red-300 hover:bg-red-50"
                    >
                      {processingJobs.has(job.id) ? 'Processing...' : 'Reject'}
                    </Button>
                    <Button
                      onClick={() => handleApprove(job.id)}
                      disabled={processingJobs.has(job.id)}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      {processingJobs.has(job.id) ? 'Processing...' : 'Approve'}
                    </Button>
                  </div>
                </div>
              </div>
            </Card>
          ))}
        </div>
      )}
    </div>
  )
}
