// Generated by Copilot
'use client'

import React, { useState, useEffect } from 'react'
import { Switch } from '@/components/ui/switch'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { AlertCircle, CheckCircle, Globe, RefreshCw, Settings, Database, Eye, EyeOff } from 'lucide-react'
import { toast } from 'sonner'

// Simple toast function if sonner is not working
const showToast = (message: string, type: 'success' | 'error' | 'info' = 'info') => {
  try {
    if (typeof toast !== 'undefined') {
      if (type === 'success') toast.success(message)
      else if (type === 'error') toast.error(message)
      else toast.info ? toast.info(message) : toast(message)
    } else {
      alert(message) // Fallback
    }
  } catch {
    alert(message) // Fallback
  }
}

interface RSSFeed {
  name: string
  url: string
  enabled: boolean
  description: string
  lastFetch?: string
  jobsFound?: number
  status?: 'success' | 'error' | 'pending'
  error?: string
}

interface RSSStats {
  totalFeeds: number
  activeFeeds: number
  totalJobsToday: number
  totalJobsWeek: number
  lastScrapeTime: string
  scrapingStatus: 'idle' | 'running' | 'error'
}

interface JobReview {
  id: string
  title: string
  company: string
  location: string
  source: string
  posted_at: string
  is_active: boolean
  selected?: boolean
}

export default function RSSScrapingSettings() {
  const [rssFeeds, setRssFeeds] = useState<RSSFeed[]>([])
  const [stats, setStats] = useState<RSSStats | null>(null)
  const [pendingJobs, setPendingJobs] = useState<JobReview[]>([])
  const [loading, setLoading] = useState(true)
  const [scraping, setScraping] = useState(false)
  const [saving, setSaving] = useState(false)
  const [hasChanges, setHasChanges] = useState(false)
  const [selectedJobs, setSelectedJobs] = useState<Set<string>>(new Set())
  const [activeTab, setActiveTab] = useState('feeds')
  
  // Load RSS feeds and statistics
  useEffect(() => {
    loadRSSData()
    loadPendingJobs()
  }, [])

  const loadRSSData = async () => {
    try {
      setLoading(true)
      
      // Load RSS feed configurations
      const feedsResponse = await fetch('/api/admin/rss-feeds')
      if (feedsResponse.ok) {
        const feedsData = await feedsResponse.json()
        setRssFeeds(feedsData.feeds || [])
      }
      
      // Load statistics
      const statsResponse = await fetch('/api/admin/rss-stats')
      if (statsResponse.ok) {
        const statsData = await statsResponse.json()
        setStats(statsData.stats)
      }
      
    } catch (error) {      console.error('Error loading RSS data:', error)
      showToast('Failed to load RSS settings', 'error')
    } finally {
      setLoading(false)
    }
  }

  const loadPendingJobs = async () => {
    try {
      const response = await fetch('/api/admin/jobs/pending')
      if (response.ok) {
        const data = await response.json()
        setPendingJobs(data.jobs || [])
      }
    } catch (error) {
      console.error('Error loading pending jobs:', error)
    }
  }

  const toggleRSSFeed = (feedName: string, enabled: boolean) => {
    const feedIndex = rssFeeds.findIndex(feed => feed.name === feedName)
    if (feedIndex !== -1) {
      updateRSSFeed(feedIndex, { enabled })
    }
  }

  const runRSSScraping = async () => {
    try {
      setScraping(true)
      showToast('Starting RSS scraping...', 'info')
      
      const response = await fetch('/api/scrape', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_CRON_SECRET || 'your-secure-secret-key-here-change-this-in-production'}`
        }
      })

      if (response.ok) {
        const data = await response.json()
        showToast(`Scraping completed! Found ${data.summary?.totalJobsFound} jobs, inserted ${data.summary?.totalJobsInserted}`, 'success')
        
        // Reload data
        await loadRSSData()
        await loadPendingJobs()
      } else {
        throw new Error('Scraping failed')
      }
    } catch (error) {      console.error('Error running RSS scraping:', error)
      showToast('RSS scraping failed', 'error')
    } finally {
      setScraping(false)
    }
  }

  const toggleJobSelection = (jobId: string) => {
    const newSelected = new Set(selectedJobs)
    if (newSelected.has(jobId)) {
      newSelected.delete(jobId)
    } else {
      newSelected.add(jobId)
    }
    setSelectedJobs(newSelected)
  }

  const selectAllJobs = () => {
    setSelectedJobs(new Set(pendingJobs.map(job => job.id)))
  }

  const unselectAllJobs = () => {
    setSelectedJobs(new Set())
  }
  const bulkApproveJobs = async () => {
    if (selectedJobs.size === 0) {
      showToast('No jobs selected', 'error')
      return
    }

    try {
      const response = await fetch('/api/admin/jobs/bulk-approve', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ jobIds: Array.from(selectedJobs) })
      })

      if (response.ok) {
        showToast(`Approved ${selectedJobs.size} jobs`, 'success')
        setSelectedJobs(new Set())
        await loadPendingJobs()
      } else {
        throw new Error('Bulk approval failed')
      }
    } catch (error) {      console.error('Error bulk approving jobs:', error)
      showToast('Failed to approve jobs', 'error')
    }
  }
  const bulkRejectJobs = async () => {
    if (selectedJobs.size === 0) {
      showToast('No jobs selected', 'error')
      return
    }

    try {
      const response = await fetch('/api/admin/jobs/bulk-reject', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ jobIds: Array.from(selectedJobs) })
      })

      if (response.ok) {
        showToast(`Rejected ${selectedJobs.size} jobs`, 'success')
        setSelectedJobs(new Set())
        await loadPendingJobs()
      } else {
        throw new Error('Bulk rejection failed')
      }
    } catch (error) {      console.error('Error bulk rejecting jobs:', error)
      showToast('Failed to reject jobs', 'error')
    }
  }

  // Track changes to RSS feeds
  const updateRSSFeed = (index: number, updates: Partial<RSSFeed>) => {
    setRssFeeds(prev => {
      const updated = [...prev]
      updated[index] = { ...updated[index], ...updates }
      return updated
    })
    setHasChanges(true)
  }

  // Save RSS feed settings
  const saveRSSSettings = async () => {
    try {
      setSaving(true)
      
      const response = await fetch('/api/admin/rss-feeds', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ feeds: rssFeeds })
      })

      if (response.ok) {
        showToast('RSS settings saved successfully', 'success')
        setHasChanges(false)
        await loadRSSData() // Reload to get fresh data
      } else {
        const error = await response.json()
        showToast(`Failed to save settings: ${error.message}`, 'error')
      }
    } catch (error) {
      console.error('Error saving RSS settings:', error)
      showToast('Failed to save RSS settings', 'error')
    } finally {
      setSaving(false)
    }
  }

  // Reset changes
  const resetChanges = () => {
    loadRSSData()
    setHasChanges(false)
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <RefreshCw className="h-6 w-6 animate-spin" />
        <span className="ml-2">Loading RSS settings...</span>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">RSS Scraping Settings</h2>
          <p className="text-muted-foreground">
            Configure RSS feed sources and manage scraped jobs
          </p>
        </div>
        <Button 
          onClick={runRSSScraping} 
          disabled={scraping}
          className="flex items-center gap-2"
        >
          {scraping ? (
            <RefreshCw className="h-4 w-4 animate-spin" />
          ) : (
            <Globe className="h-4 w-4" />
          )}
          {scraping ? 'Scraping...' : 'Run Scraping'}
        </Button>
      </div>

      {stats && (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Active Feeds</CardTitle>
              <Settings className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.activeFeeds}/{stats.totalFeeds}</div>
              <p className="text-xs text-muted-foreground">
                RSS feeds enabled
              </p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Jobs Today</CardTitle>
              <Database className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.totalJobsToday}</div>
              <p className="text-xs text-muted-foreground">
                Scraped today
              </p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Jobs This Week</CardTitle>
              <Database className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.totalJobsWeek}</div>
              <p className="text-xs text-muted-foreground">
                Scraped this week
              </p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Last Scrape</CardTitle>
              <RefreshCw className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-sm font-bold">
                {stats.lastScrapeTime ? new Date(stats.lastScrapeTime).toLocaleString() : 'Never'}
              </div>
              <p className="text-xs text-muted-foreground">
                Status: {stats.scrapingStatus}
              </p>
            </CardContent>
          </Card>
        </div>
      )}

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="feeds">RSS Feeds</TabsTrigger>
          <TabsTrigger value="review">Job Review ({pendingJobs.length})</TabsTrigger>
        </TabsList>
        
        <TabsContent value="feeds" className="space-y-4">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>RSS Feed Sources</CardTitle>
                  <CardDescription>
                    Configure which RSS feeds to scrape for remote jobs
                  </CardDescription>
                </div>
                {hasChanges && (
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={resetChanges}
                      disabled={saving}
                    >
                      Reset
                    </Button>
                    <Button
                      size="sm"
                      onClick={saveRSSSettings}
                      disabled={saving}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      {saving ? 'Saving...' : 'Save Changes'}
                    </Button>
                  </div>
                )}
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {rssFeeds.map((feed, index) => (
                <div key={feed.name} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="font-medium">{feed.name}</h4>
                      <Badge variant={feed.enabled ? 'default' : 'secondary'}>
                        {feed.enabled ? 'Active' : 'Inactive'}
                      </Badge>
                      {feed.status === 'success' && (
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      )}
                      {feed.status === 'error' && (
                        <AlertCircle className="h-4 w-4 text-red-500" />
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground mb-1">{feed.description}</p>
                    <p className="text-xs text-muted-foreground">{feed.url}</p>
                    {feed.jobsFound !== undefined && (
                      <p className="text-xs text-green-600 mt-1">
                        Last scrape: {feed.jobsFound} jobs found
                      </p>
                    )}
                    {feed.error && (
                      <p className="text-xs text-red-600 mt-1">
                        Error: {feed.error}
                      </p>
                    )}
                  </div>
                  <Switch
                    checked={feed.enabled}
                    onCheckedChange={(enabled) => toggleRSSFeed(feed.name, enabled)}
                  />
                </div>
              ))}
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="review" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Job Review Queue</CardTitle>
              <CardDescription>
                Review and approve scraped jobs before they go live
              </CardDescription>
              <div className="flex items-center gap-2 pt-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={selectAllJobs}
                  disabled={pendingJobs.length === 0}
                >
                  <Eye className="h-4 w-4 mr-1" />
                  Select All
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={unselectAllJobs}
                  disabled={selectedJobs.size === 0}
                >
                  <EyeOff className="h-4 w-4 mr-1" />
                  Unselect All
                </Button>
                <Button
                  onClick={bulkApproveJobs}
                  disabled={selectedJobs.size === 0}
                  className="bg-green-600 hover:bg-green-700"
                >
                  Approve Selected ({selectedJobs.size})
                </Button>
                <Button
                  variant="destructive"
                  onClick={bulkRejectJobs}
                  disabled={selectedJobs.size === 0}
                >
                  Reject Selected ({selectedJobs.size})
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              {pendingJobs.length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">
                  No jobs pending review
                </div>
              ) : (
                <div className="space-y-2">
                  {pendingJobs.map((job) => (
                    <div 
                      key={job.id} 
                      className={`flex items-center gap-3 p-3 border rounded-lg cursor-pointer transition-colors ${
                        selectedJobs.has(job.id) ? 'bg-blue-50 border-blue-200' : 'hover:bg-gray-50'
                      }`}
                      onClick={() => toggleJobSelection(job.id)}
                    >
                      <input
                        type="checkbox"
                        checked={selectedJobs.has(job.id)}
                        onChange={() => toggleJobSelection(job.id)}
                        className="rounded"
                      />
                      <div className="flex-1">
                        <h4 className="font-medium">{job.title}</h4>
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <span>{job.company}</span>
                          <span>•</span>
                          <span>{job.location}</span>
                          <span>•</span>
                          <Badge variant="outline" className="text-xs">
                            {job.source || 'RSS'}
                          </Badge>
                        </div>
                        <p className="text-xs text-muted-foreground">
                          Posted: {new Date(job.posted_at).toLocaleDateString()}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <div className="flex justify-end gap-4">
        <Button variant="outline" onClick={resetChanges} disabled={!hasChanges}>
          Reset Changes
        </Button>
        <Button 
          onClick={saveRSSSettings} 
          disabled={!hasChanges || saving}
          className="flex items-center gap-2"
        >
          {saving ? (
            <RefreshCw className="h-4 w-4 animate-spin" />
          ) : (
            <CheckCircle className="h-4 w-4" />
          )}
          {saving ? 'Saving...' : 'Save Settings'}
        </Button>
      </div>
    </div>
  )
}
