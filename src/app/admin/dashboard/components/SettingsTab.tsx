// Generated by Copilot
'use client'

import { useState, useEffect, useCallback } from 'react'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { Select } from '@/components/ui/select'

interface ScrapingSettings {
  sources: Array<{
    id: string
    name: string
    url: string
    enabled: boolean
    description: string
  }>
  schedule: {
    enabled: boolean
    interval: 'hourly' | 'daily' | 'weekly'
    time: string
    timezone: string
  }
  notifications: {
    email: boolean
    slack: boolean
    webhookUrl: string
  }
  limits: {
    maxJobsPerRun: number
    cooldownMinutes: number
  }
}

interface SettingsTabProps {
  scrapingSettings: ScrapingSettings | null
  settingsLoading: boolean
  onSaveSettings: (settings: ScrapingSettings) => Promise<boolean>
  onLoadSettings: () => Promise<void>
}

export default function SettingsTab({
  scrapingSettings,
  settingsLoading,
  onSaveSettings,
  onLoadSettings
}: SettingsTabProps) {  const [localSettings, setLocalSettings] = useState<ScrapingSettings | null>(null)
  const [saving, setSaving] = useState(false)
  const [saved, setSaved] = useState(false)
  
  // Only update local settings when scrapingSettings actually changes
  useEffect(() => {
    if (scrapingSettings) {
      setLocalSettings({ ...scrapingSettings })
    }
  }, [scrapingSettings])

  const handleSave = useCallback(async () => {
    if (!localSettings) return

    console.log('Saving settings:', localSettings)
    setSaving(true)
    
    try {
      const success = await onSaveSettings(localSettings)
      
      if (success) {
        setSaved(true)
        setTimeout(() => setSaved(false), 3000)
      } else {
        console.error('Save failed from hook')
        alert('Failed to save some settings. Sources may have been updated successfully. Please refresh and check.')
      }
    } catch (error) {
      console.error('Save error:', error)
      alert('Failed to save settings. Please check the console for details and try again.')
    }
    
    setSaving(false)
  }, [localSettings, onSaveSettings])
  const updateSource = useCallback((sourceId: string, updates: Partial<ScrapingSettings['sources'][0]>) => {
    setLocalSettings(prev => {
      if (!prev) return prev
      
      return {
        ...prev,
        sources: prev.sources.map(source =>
          source.id === sourceId ? { ...source, ...updates } : source
        )
      }
    })
  }, [])

  const addNewSource = useCallback(() => {
    setLocalSettings(prev => {
      if (!prev) return prev
      
      const newSource = {
        id: `custom-${Date.now()}`,
        name: 'Custom Source',
        url: 'https://example.com/jobs',
        enabled: false,
        description: 'Custom job board source'
      }

      return {
        ...prev,
        sources: [...prev.sources, newSource]
      }
    })
  }, [])

  const removeSource = useCallback((sourceId: string) => {
    setLocalSettings(prev => {
      if (!prev) return prev
      
      return {
        ...prev,
        sources: prev.sources.filter(source => source.id !== sourceId)
      }
    })
  }, [])

  if (settingsLoading || !localSettings) {
    return (
      <div className="flex justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Save/Reset Actions */}
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold text-gray-900">Scraping Settings</h2>
        <div className="flex gap-3">
          <Button
            variant="outline"
            onClick={onLoadSettings}
            disabled={saving}
          >
            Reset Changes
          </Button>
          <Button
            onClick={handleSave}
            disabled={saving}
            className={saved ? 'bg-green-600 hover:bg-green-700' : ''}
          >
            {saving ? 'Saving...' : saved ? 'Saved!' : 'Save Settings'}
          </Button>
        </div>
      </div>

      {/* Scraping Sources */}
      <Card className="p-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold text-gray-900">Scraping Sources</h3>
          <Button onClick={addNewSource} variant="outline">
            Add Source
          </Button>
        </div>

        <div className="space-y-4">
          {localSettings.sources.map((source) => (
            <div key={source.id} className="border rounded-lg p-4">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center gap-3">
                  <Switch
                    checked={source.enabled}
                    onCheckedChange={(enabled) => updateSource(source.id, { enabled })}
                  />
                  <span className="font-medium text-gray-900">{source.name}</span>
                </div>
                {source.id.startsWith('custom-') && (
                  <Button
                    onClick={() => removeSource(source.id)}
                    variant="outline"
                    size="sm"
                    className="text-red-600 border-red-300 hover:bg-red-50"
                  >
                    Remove
                  </Button>
                )}
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor={`name-${source.id}`}>Source Name</Label>
                  <Input
                    id={`name-${source.id}`}
                    value={source.name}
                    onChange={(e) => updateSource(source.id, { name: e.target.value })}
                    placeholder="e.g., YCombinator Jobs"
                  />
                </div>
                <div>
                  <Label htmlFor={`url-${source.id}`}>URL</Label>
                  <Input
                    id={`url-${source.id}`}
                    value={source.url}
                    onChange={(e) => updateSource(source.id, { url: e.target.value })}
                    placeholder="https://example.com/jobs"
                  />
                </div>
              </div>

              <div className="mt-3">
                <Label htmlFor={`desc-${source.id}`}>Description</Label>
                <Input
                  id={`desc-${source.id}`}
                  value={source.description}
                  onChange={(e) => updateSource(source.id, { description: e.target.value })}
                  placeholder="Brief description of this source"
                />
              </div>
            </div>
          ))}
        </div>
      </Card>

      {/* Automated Scheduling */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Automated Scheduling</h3>
        
        <div className="space-y-4">
          <div className="flex items-center gap-3">
            <Switch
              checked={localSettings.schedule.enabled}
              onCheckedChange={(enabled) => 
                setLocalSettings(prev => ({
                  ...prev!,
                  schedule: { ...prev!.schedule, enabled }
                }))
              }
            />
            <Label>Enable automated scraping</Label>
          </div>

          {localSettings.schedule.enabled && (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 pl-8">
              <div>
                <Label htmlFor="interval">Frequency</Label>
                <Select
                  id="interval"
                  value={localSettings.schedule.interval}                  onChange={(e) => 
                    setLocalSettings(prev => ({
                      ...prev!,
                      schedule: { ...prev!.schedule, interval: e.target.value as 'hourly' | 'daily' | 'weekly' }
                    }))
                  }
                >
                  <option value="hourly">Every Hour</option>
                  <option value="daily">Daily</option>
                  <option value="weekly">Weekly</option>
                </Select>
              </div>
              <div>
                <Label htmlFor="time">Time</Label>
                <Input
                  id="time"
                  type="time"
                  value={localSettings.schedule.time}
                  onChange={(e) => 
                    setLocalSettings(prev => ({
                      ...prev!,
                      schedule: { ...prev!.schedule, time: e.target.value }
                    }))
                  }
                />
              </div>
              <div>
                <Label htmlFor="timezone">Timezone</Label>
                <Select
                  id="timezone"
                  value={localSettings.schedule.timezone}
                  onChange={(e) => 
                    setLocalSettings(prev => ({
                      ...prev!,
                      schedule: { ...prev!.schedule, timezone: e.target.value }
                    }))
                  }
                >
                  <option value="UTC">UTC</option>
                  <option value="America/New_York">Eastern Time</option>
                  <option value="America/Chicago">Central Time</option>
                  <option value="America/Denver">Mountain Time</option>
                  <option value="America/Los_Angeles">Pacific Time</option>
                </Select>
              </div>
            </div>
          )}
        </div>
      </Card>

      {/* Notifications */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Notifications</h3>
        
        <div className="space-y-4">
          <div className="flex items-center gap-3">
            <Switch
              checked={localSettings.notifications.email}
              onCheckedChange={(email) => 
                setLocalSettings(prev => ({
                  ...prev!,
                  notifications: { ...prev!.notifications, email }
                }))
              }
            />
            <Label>Email notifications for scraping results</Label>
          </div>

          <div className="flex items-center gap-3">
            <Switch
              checked={localSettings.notifications.slack}
              onCheckedChange={(slack) => 
                setLocalSettings(prev => ({
                  ...prev!,
                  notifications: { ...prev!.notifications, slack }
                }))
              }
            />
            <Label>Slack notifications</Label>
          </div>

          {localSettings.notifications.slack && (
            <div className="pl-8">
              <Label htmlFor="webhookUrl">Slack Webhook URL</Label>
              <Input
                id="webhookUrl"
                value={localSettings.notifications.webhookUrl}
                onChange={(e) => 
                  setLocalSettings(prev => ({
                    ...prev!,
                    notifications: { ...prev!.notifications, webhookUrl: e.target.value }
                  }))
                }
                placeholder="https://hooks.slack.com/services/..."
              />
            </div>
          )}
        </div>
      </Card>

      {/* Rate Limiting */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Rate Limiting & Safeguards</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="maxJobs">Maximum jobs per run</Label>
            <Input
              id="maxJobs"
              type="number"
              value={localSettings.limits.maxJobsPerRun}
              onChange={(e) => 
                setLocalSettings(prev => ({
                  ...prev!,
                  limits: { ...prev!.limits, maxJobsPerRun: parseInt(e.target.value) || 0 }
                }))
              }
              min="1"
              max="1000"
            />
            <p className="text-sm text-gray-600 mt-1">
              Limit to prevent overwhelming the system
            </p>
          </div>
          <div>
            <Label htmlFor="cooldown">Cooldown period (minutes)</Label>
            <Input
              id="cooldown"
              type="number"
              value={localSettings.limits.cooldownMinutes}
              onChange={(e) => 
                setLocalSettings(prev => ({
                  ...prev!,
                  limits: { ...prev!.limits, cooldownMinutes: parseInt(e.target.value) || 0 }
                }))
              }
              min="5"
              max="1440"
            />
            <p className="text-sm text-gray-600 mt-1">
              Minimum time between scraping runs
            </p>
          </div>
        </div>
      </Card>
    </div>
  )
}
