// Generated by Copilot
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Tag } from '@/components/ui/tag'

interface ScrapingSettings {
  sources: Array<{
    id: string
    name: string
    url: string
    enabled: boolean
    description: string
  }>
  schedule: {
    enabled: boolean
    interval: 'hourly' | 'daily' | 'weekly'
    time: string
    timezone: string
  }
  notifications: {
    email: boolean
    slack: boolean
    webhookUrl: string
  }
  limits: {
    maxJobsPerRun: number
    cooldownMinutes: number  }
}

interface ScrapingResult {
  success: boolean
  summary: {
    totalJobsFound: number
    totalJobsInserted: number
    totalErrors: number
  }
  results: Array<{
    source: string
    jobsFound: number
    jobsInserted: number
    errors: string[]
  }>
  message: string
  id?: number
  timestamp?: string
}

interface ScrapingTabProps {
  scrapingInProgress: boolean
  scrapingSettings: ScrapingSettings | null
  onRunScraper: () => Promise<ScrapingResult | null>
  onRefreshJobs: () => Promise<void>
}

export default function ScrapingTab({
  scrapingInProgress,
  scrapingSettings,
  onRunScraper,
  onRefreshJobs
}: ScrapingTabProps) {  const [lastScrapingResult, setLastScrapingResult] = useState<ScrapingResult | null>(null)
  const [scrapingHistory, setScrapingHistory] = useState<ScrapingResult[]>([])

  const handleRunScraper = async () => {
    const result = await onRunScraper()
    if (result) {
      setLastScrapingResult(result)
      setScrapingHistory(prev => [
        {
          ...result,
          timestamp: new Date().toISOString(),
          id: Date.now()
        },
        ...prev.slice(0, 4) // Keep last 5 results
      ])
      // Refresh jobs after scraping
      await onRefreshJobs()
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return (
    <div className="space-y-6">
      {/* Quick Actions */}
      <Card className="p-6">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h3 className="text-lg font-semibold text-gray-900">Manual Scraping</h3>
            <p className="text-sm text-gray-600">
              Run the job scraper manually to find new job listings
            </p>
          </div>
          <Button
            onClick={handleRunScraper}
            disabled={scrapingInProgress}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {scrapingInProgress ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Scraping...
              </>
            ) : (
              'Run Scraper Now'
            )}
          </Button>
        </div>

        {scrapingInProgress && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="flex items-center">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 mr-3"></div>
              <div>
                <p className="font-medium text-blue-900">Scraping in progress...</p>
                <p className="text-sm text-blue-700">
                  This may take a few minutes depending on the number of sources
                </p>
              </div>
            </div>
          </div>
        )}
      </Card>

      {/* Active Sources */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Active Sources</h3>
        {scrapingSettings ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {scrapingSettings.sources.map((source) => (
              <div
                key={source.id}
                className={`p-4 rounded-lg border-2 ${
                  source.enabled
                    ? 'border-green-200 bg-green-50'
                    : 'border-gray-200 bg-gray-50'
                }`}
              >
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-medium text-gray-900">{source.name}</h4>
                  <Tag variant={source.enabled ? 'default' : 'secondary'}>
                    {source.enabled ? 'Active' : 'Inactive'}
                  </Tag>
                </div>
                <p className="text-sm text-gray-600 mb-2">{source.description}</p>
                <a
                  href={source.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-xs text-blue-600 hover:text-blue-800 break-all"
                >
                  {source.url}
                </a>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-400 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading scraping sources...</p>
          </div>
        )}
      </Card>

      {/* Last Scraping Result */}
      {lastScrapingResult && (
        <Card className="p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Last Scraping Result</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">
                {lastScrapingResult.summary.totalJobsFound}
              </div>
              <div className="text-sm text-blue-700">Jobs Found</div>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="text-2xl font-bold text-green-600">
                {lastScrapingResult.summary.totalJobsInserted}
              </div>
              <div className="text-sm text-green-700">Jobs Added</div>
            </div>
            <div className="bg-red-50 p-4 rounded-lg">
              <div className="text-2xl font-bold text-red-600">
                {lastScrapingResult.summary.totalErrors}
              </div>
              <div className="text-sm text-red-700">Errors</div>
            </div>
          </div>

          {lastScrapingResult.results && lastScrapingResult.results.length > 0 && (
            <div>
              <h4 className="font-medium text-gray-900 mb-3">Source Breakdown</h4>              <div className="space-y-2">
                {lastScrapingResult.results.map((result, index: number) => (
                  <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded">
                    <span className="font-medium">{result.source}</span>
                    <div className="flex gap-4 text-sm">
                      <span className="text-blue-600">Found: {result.jobsFound}</span>
                      <span className="text-green-600">Added: {result.jobsInserted}</span>
                      {result.errors.length > 0 && (
                        <span className="text-red-600">Errors: {result.errors.length}</span>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </Card>
      )}

      {/* Scraping History */}
      {scrapingHistory.length > 0 && (
        <Card className="p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Scraping History</h3>
          <div className="space-y-3">
            {scrapingHistory.map((result) => (
              <div key={result.id} className="flex justify-between items-center p-3 border rounded">
                <div>
                  <div className="font-medium text-gray-900">
                    {formatDate(result.timestamp || new Date().toISOString())}
                  </div>
                  <div className="text-sm text-gray-600">
                    Found {result.summary.totalJobsFound}, Added {result.summary.totalJobsInserted}
                  </div>
                </div>
                <div className="flex gap-2">
                  <Tag variant="secondary">{result.summary.totalJobsFound} found</Tag>
                  <Tag variant="default">{result.summary.totalJobsInserted} added</Tag>
                  {result.summary.totalErrors > 0 && (
                    <Tag variant="destructive">{result.summary.totalErrors} errors</Tag>
                  )}
                </div>
              </div>
            ))}
          </div>
        </Card>
      )}

      {/* Tips and Information */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Scraping Information</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-gray-900 mb-2">How it works</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• Scraper visits configured job board URLs</li>
              <li>• Extracts job listings and company information</li>
              <li>• Creates jobs with status &quot;pending review&quot;</li>
              <li>• Avoids duplicates by checking existing jobs</li>
              <li>• All scraped jobs require admin approval</li>
            </ul>
          </div>
          <div>
            <h4 className="font-medium text-gray-900 mb-2">Best Practices</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• Run scraper during off-peak hours</li>
              <li>• Review and approve jobs promptly</li>
              <li>• Monitor for duplicate companies</li>
              <li>• Check job quality and relevance</li>
              <li>• Update scraping sources regularly</li>
            </ul>
          </div>
        </div>
      </Card>
    </div>
  )
}
