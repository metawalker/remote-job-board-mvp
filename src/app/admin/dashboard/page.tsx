// Generated by Copilot
'use client'

import { useEffect, useState, useCallback } from 'react'
import { useRouter } from 'next/navigation'
import { useAdmin } from '@/lib/supabase/admin-hooks'
import { Button } from '@/components/ui/button'
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs'

// Import sub-components
import JobReviewTab from './components/JobReviewTab'
import ScrapingTab from './components/ScrapingTab'
import SettingsTab from './components/SettingsTab'
import StatsTab from './components/StatsTab'
import RSSScrapingSettings from './components/RSSScrapingSettings'

interface StatsData {
  overview: {
    totalJobs: number
    activeJobs: number
    pendingJobs: number
    totalCompanies: number
    verifiedCompanies: number
  }
  trends: {
    jobsLast7Days: number
    dailyBreakdown: Record<string, number>
  }
  health: {
    approvalRate: number
    pendingReview: number
  }
}

export default function AdminDashboardPage() {
  const router = useRouter()
  const {
    isAdmin,
    isLoading,
    pendingJobs,
    pendingJobsLoading,
    scrapingInProgress,
    scrapingSettings,
    settingsLoading,
    fetchPendingJobs,
    approveJob,
    rejectJob,
    runScraper,
    runURLScraper,
    runRSSScraper,
    loadScrapingSettings,
    saveScrapingSettings,
    getScrapingStats
  } = useAdmin()

  const [activeTab, setActiveTab] = useState('review')
  const [stats, setStats] = useState<StatsData | null>(null)
  const [statsLoading, setStatsLoading] = useState(false)
  const [initialLoadComplete, setInitialLoadComplete] = useState(false)

  // Redirect if not admin
  useEffect(() => {
    if (!isLoading && !isAdmin) {
      router.push('/')
    }
  }, [isAdmin, isLoading, router])

  const loadStats = useCallback(async () => {
    setStatsLoading(true)
    try {
      const statsData = await getScrapingStats()
      setStats(statsData as StatsData | null)
    } catch (error) {
      console.error('Failed to load stats:', error)
    } finally {
      setStatsLoading(false)
    }
  }, [getScrapingStats])

  // Load initial data with debouncing to prevent excessive API calls
  const loadInitialData = useCallback(async () => {
    if (!isAdmin || initialLoadComplete) return
    
    try {
      await Promise.all([
        fetchPendingJobs(),
        loadScrapingSettings(),
        loadStats()
      ])
      setInitialLoadComplete(true)
    } catch (error) {
      console.error('Failed to load initial data:', error)
    }
  }, [isAdmin, initialLoadComplete, fetchPendingJobs, loadScrapingSettings, loadStats])

  // Debounced initial load effect
  useEffect(() => {
    if (!isAdmin || initialLoadComplete) return

    const timeoutId = setTimeout(() => {
      loadInitialData()
    }, 200)

    return () => clearTimeout(timeoutId)
  }, [isAdmin, initialLoadComplete, loadInitialData])

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Checking admin permissions...</p>
        </div>
      </div>
    )
  }

  // Not admin
  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Access Denied</h1>
          <p className="text-gray-600 mb-4">You don&apos;t have admin permissions to access this page.</p>
          <Button onClick={() => router.push('/')}>Go Back Home</Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Admin Dashboard</h1>
              <p className="mt-2 text-gray-600">
                Manage job listings, configure scraping, and monitor system health
              </p>
            </div>
            <div className="flex gap-4">
              <Button
                onClick={() => window.location.reload()}
                variant="outline"
              >
                Refresh
              </Button>
              <Button onClick={() => router.push('/')}>
                Back to Site
              </Button>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <Tabs value={activeTab} onValueChange={setActiveTab}>          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="review">Job Review ({pendingJobs.length})</TabsTrigger>
            <TabsTrigger value="scraping">Scraping</TabsTrigger>
            <TabsTrigger value="rss">RSS Feeds</TabsTrigger>
            <TabsTrigger value="settings">Settings</TabsTrigger>
            <TabsTrigger value="stats">Statistics</TabsTrigger>
          </TabsList>

          <TabsContent value="review">
            <JobReviewTab
              pendingJobs={pendingJobs}
              pendingJobsLoading={pendingJobsLoading}
              onApprove={approveJob}
              onReject={rejectJob}
              onRefresh={fetchPendingJobs}
            />
          </TabsContent>

          <TabsContent value="scraping">
            <ScrapingTab
              scrapingInProgress={scrapingInProgress}
              scrapingSettings={scrapingSettings}
              onRunScraper={runScraper}
              onRunURLScraper={runURLScraper}
              onRunRSSScraper={runRSSScraper}
              onRefreshJobs={fetchPendingJobs}
            />
          </TabsContent>

          <TabsContent value="rss">
            <RSSScrapingSettings />
          </TabsContent>

          <TabsContent value="settings">
            <SettingsTab
              scrapingSettings={scrapingSettings}
              settingsLoading={settingsLoading}
              onSaveSettings={saveScrapingSettings}
              onLoadSettings={loadScrapingSettings}
            />
          </TabsContent>

          <TabsContent value="stats">
            <StatsTab
              stats={stats}
              statsLoading={statsLoading}
              onRefreshStats={loadStats}
            />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
