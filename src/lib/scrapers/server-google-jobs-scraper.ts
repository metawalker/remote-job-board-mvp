// Generated by Copilot
// Server-side only Google Jobs scraper that avoids webpack issues
import { GoogleJobsStructuredScraper } from './google-jobs-structured-scraper'
import type { GoogleJobListing } from './google-jobs-scraper'

export interface GoogleJobsScrapingOptions {
  query?: string
  location?: string
  maxPages?: number
  maxResults?: number
}

export class ServerGoogleJobsScraper {
  private structuredScraper: GoogleJobsStructuredScraper

  constructor() {
    this.structuredScraper = new GoogleJobsStructuredScraper()
  }

  /**
   * Scrape Google Jobs using structured approach only (server-safe)
   */
  async scrapeJobs(options: GoogleJobsScrapingOptions = {}): Promise<GoogleJobListing[]> {
    const {
      query = 'remote software developer',
      location = 'United States',
      maxPages = 2,
      maxResults = 30
    } = options

    console.log(`Starting server-side Google Jobs scraping: ${query} in ${location}`)
    
    try {
      // Use only structured approach to avoid Puppeteer issues
      const jobs = await this.structuredScraper.scrapeRemoteJobs(query, location, maxPages)
      
      // Apply quality scoring and sorting
      const scoredJobs = this.scoreAndSortJobs(jobs)
      const finalJobs = scoredJobs.slice(0, maxResults)

      console.log(`Server scraping completed: ${finalJobs.length} jobs found`)
      return finalJobs

    } catch (error) {
      console.error('Server-side Google Jobs scraping failed:', error)
      return []
    }
  }

  /**
   * Score jobs based on quality indicators and sort by score
   */
  private scoreAndSortJobs(jobs: GoogleJobListing[]): GoogleJobListing[] {
    return jobs
      .map(job => ({
        ...job,
        score: this.calculateJobScore(job)
      }))
      .sort((a, b) => (b as any).score - (a as any).score)
      .map(({ score, ...job }) => job) // Remove score from final result
  }

  /**
   * Calculate a quality score for a job (0-100)
   */
  private calculateJobScore(job: GoogleJobListing): number {
    let score = 50 // Base score

    // Title quality
    if (job.title.length > 10 && job.title.length < 100) score += 10
    if (job.title.toLowerCase().includes('senior') || job.title.toLowerCase().includes('lead')) score += 5
    if (job.title.toLowerCase().includes('remote')) score += 10

    // Company quality
    if (job.company.length > 2 && !job.company.toLowerCase().includes('unknown')) score += 10

    // Description quality
    if (job.description.length > 200) score += 10
    if (job.description.length > 500) score += 5

    // Has apply URL (direct application)
    if (job.applyUrl && job.applyUrl.includes('http')) score += 15

    // Has salary information
    if (job.salaryText && job.salaryText.length > 5) score += 10

    // Remote indicators
    const remoteKeywords = ['remote', 'work from home', 'distributed', 'telecommute']
    const textToCheck = `${job.title} ${job.location} ${job.description}`.toLowerCase()
    const remoteMatches = remoteKeywords.filter(keyword => textToCheck.includes(keyword)).length
    score += remoteMatches * 3

    // Skills variety
    if (job.skills && job.skills.length > 0) {
      score += Math.min(job.skills.length * 2, 10)
    }

    // Employment type preference (full-time jobs score higher)
    if (job.employmentType === 'full-time') score += 5

    // Penalize very short descriptions or titles
    if (job.description.length < 50) score -= 10
    if (job.title.length < 5) score -= 15

    return Math.max(0, Math.min(100, score))
  }

  /**
   * Health check for the server scraper
   */
  async getScrapingHealth(): Promise<{
    structuredAvailable: boolean
    testResults: { structured: boolean }
  }> {
    try {
      // Simple test to see if we can make a request
      const testJobs = await this.structuredScraper.scrapeRemoteJobs('test developer', 'US', 1)
      return {
        structuredAvailable: true,
        testResults: { structured: true }
      }
    } catch (error) {
      console.warn('Server scraper health check failed:', error)
      return {
        structuredAvailable: false,
        testResults: { structured: false }
      }
    }
  }
}

export default ServerGoogleJobsScraper
