// Generated by Copilot
'use client'

import { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'
import { useAuth } from '@/lib/supabase/hooks'

interface PendingJob {
  id: string
  title: string
  description: string
  location: string
  salary_min: number | null
  salary_max: number | null
  employment_type: string
  remote_type: string
  skills: string[]
  apply_url: string | null
  posted_at: string
  created_at: string
  companies: {
    id: string
    name: string
    website: string | null
    is_verified: boolean
  }
}

interface AdminHookReturn {
  isAdmin: boolean
  isLoading: boolean
  pendingJobs: PendingJob[]
  pendingJobsLoading: boolean
  fetchPendingJobs: () => Promise<void>
  approveJob: (jobId: string) => Promise<boolean>
  rejectJob: (jobId: string) => Promise<boolean>
}

export function useAdmin(): AdminHookReturn {
  const { user, loading } = useAuth()
  const [isAdmin, setIsAdmin] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [pendingJobs, setPendingJobs] = useState<PendingJob[]>([])
  const [pendingJobsLoading, setPendingJobsLoading] = useState(false)

  const supabase = createClient()

  // Check if user is admin
  useEffect(() => {
    async function checkAdminStatus() {
      if (loading) return
      
      if (!user) {
        setIsAdmin(false)
        setIsLoading(false)
        return
      }

      try {
        const { data, error } = await supabase
          .from('user_profiles')
          .select('is_admin')
          .eq('user_id', user.id)
          .single()

        if (error) {
          console.error('Error checking admin status:', error)
          setIsAdmin(false)
        } else {
          setIsAdmin(data?.is_admin === true)
        }
      } catch (error) {
        console.error('Admin check error:', error)
        setIsAdmin(false)
      } finally {
        setIsLoading(false)
      }
    }

    checkAdminStatus()
  }, [user, loading, supabase])

  // Fetch pending jobs
  const fetchPendingJobs = async () => {
    if (!isAdmin) return

    setPendingJobsLoading(true)
    try {
      const response = await fetch('/api/admin/pending-jobs')
      const data = await response.json()

      if (response.ok && data.success) {
        setPendingJobs(data.jobs)
      } else {
        console.error('Error fetching pending jobs:', data.error)
        setPendingJobs([])
      }
    } catch (error) {
      console.error('Fetch pending jobs error:', error)
      setPendingJobs([])
    } finally {
      setPendingJobsLoading(false)
    }
  }

  // Approve a job
  const approveJob = async (jobId: string): Promise<boolean> => {
    try {
      const response = await fetch(`/api/jobs/${jobId}/approve`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        }
      })

      const data = await response.json()

      if (response.ok && data.success) {
        // Remove from pending jobs list
        setPendingJobs(prev => prev.filter(job => job.id !== jobId))
        return true
      } else {
        console.error('Error approving job:', data.error)
        return false
      }
    } catch (error) {
      console.error('Approve job error:', error)
      return false
    }
  }

  // Reject/delete a job
  const rejectJob = async (jobId: string): Promise<boolean> => {
    try {
      const response = await fetch(`/api/jobs/${jobId}/approve`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      })

      const data = await response.json()

      if (response.ok && data.success) {
        // Remove from pending jobs list
        setPendingJobs(prev => prev.filter(job => job.id !== jobId))
        return true
      } else {
        console.error('Error rejecting job:', data.error)
        return false
      }
    } catch (error) {
      console.error('Reject job error:', error)
      return false
    }
  }

  return {
    isAdmin,
    isLoading,
    pendingJobs,
    pendingJobsLoading,
    fetchPendingJobs,
    approveJob,
    rejectJob
  }
}
