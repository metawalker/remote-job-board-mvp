// Generated by Copilot
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Tag } from '@/components/ui/tag'
import { Bookmark, BookmarkPlus, X, Search } from 'lucide-react'

interface SavedSearch {
  id: string
  name: string
  filters: {
    title?: string
    location?: string
    employmentType?: string
    skills?: string
    salaryMin?: string
    salaryMax?: string
  }
  createdAt: string
}

interface SavedSearchesProps {
  onLoadSearch?: (filters: any) => void
}

export function SavedSearches({ onLoadSearch }: SavedSearchesProps) {
  const [savedSearches, setSavedSearches] = useState<SavedSearch[]>([])
  const [isAddingSearch, setIsAddingSearch] = useState(false)
  const [newSearchName, setNewSearchName] = useState('')

  // Load saved searches from localStorage on component mount
  useEffect(() => {
    const saved = localStorage.getItem('jobSearches')
    if (saved) {
      try {
        setSavedSearches(JSON.parse(saved))
      } catch (error) {
        console.error('Error loading saved searches:', error)
      }
    }
  }, [])

  // Save searches to localStorage whenever savedSearches changes
  useEffect(() => {
    localStorage.setItem('jobSearches', JSON.stringify(savedSearches))
  }, [savedSearches])

  const saveCurrentSearch = (filters: any, name: string) => {
    const newSearch: SavedSearch = {
      id: Date.now().toString(),
      name,
      filters,
      createdAt: new Date().toISOString()
    }

    setSavedSearches(prev => [newSearch, ...prev.slice(0, 9)]) // Keep max 10 searches
    setNewSearchName('')
    setIsAddingSearch(false)
  }

  const deleteSearch = (id: string) => {
    setSavedSearches(prev => prev.filter(search => search.id !== id))
  }

  const loadSearch = (search: SavedSearch) => {
    onLoadSearch?.(search.filters)
  }

  const formatSearchPreview = (filters: any) => {
    const parts = []
    if (filters.title) parts.push(`Title: ${filters.title}`)
    if (filters.location) parts.push(`Location: ${filters.location}`)
    if (filters.skills) parts.push(`Skills: ${filters.skills}`)
    if (filters.employmentType) parts.push(`Type: ${filters.employmentType}`)
    if (filters.salaryMin) parts.push(`Min: $${filters.salaryMin}`)
    if (filters.salaryMax) parts.push(`Max: $${filters.salaryMax}`)
    
    return parts.length > 0 ? parts.join(' â€¢ ') : 'All jobs'
  }

  if (savedSearches.length === 0 && !isAddingSearch) {
    return null
  }

  return (
    <Card>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="text-lg flex items-center gap-2">
            <Bookmark className="h-5 w-5" />
            Saved Searches
          </CardTitle>
          <Button
            size="sm"
            variant="outline"
            onClick={() => setIsAddingSearch(!isAddingSearch)}
            className="flex items-center gap-1"
          >
            <BookmarkPlus className="h-4 w-4" />
            Save Search
          </Button>
        </div>
      </CardHeader>
      <CardContent className="space-y-3">
        {isAddingSearch && (
          <div className="p-3 border rounded-lg bg-muted/50">
            <div className="flex gap-2 mb-2">
              <Input
                placeholder="Enter search name..."
                value={newSearchName}
                onChange={(e) => setNewSearchName(e.target.value)}
                className="flex-1"
              />
              <Button
                size="sm"
                onClick={() => {
                  if (newSearchName.trim()) {
                    // This would be called with current filters from parent component
                    // For demo purposes, we'll save an empty search
                    saveCurrentSearch({}, newSearchName.trim())
                  }
                }}
                disabled={!newSearchName.trim()}
              >
                Save
              </Button>
            </div>
          </div>
        )}

        {savedSearches.map((search) => (
          <div
            key={search.id}
            className="flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 transition-colors"
          >
            <div className="flex-1 cursor-pointer" onClick={() => loadSearch(search)}>
              <div className="flex items-center gap-2 mb-1">
                <h4 className="font-medium">{search.name}</h4>
                <Search className="h-3 w-3 text-muted-foreground" />
              </div>
              <p className="text-xs text-muted-foreground line-clamp-1">
                {formatSearchPreview(search.filters)}
              </p>
            </div>
            <Button
              size="sm"
              variant="ghost"
              onClick={() => deleteSearch(search.id)}
              className="ml-2 p-1 h-auto"
            >
              <X className="h-3 w-3" />
            </Button>
          </div>
        ))}
      </CardContent>
    </Card>
  )
}
