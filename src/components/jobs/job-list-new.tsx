// Generated by Copilot
'use client'

import { useJobs, useJobSearch } from '@/lib/supabase/hooks'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Tag } from '@/components/ui/tag'
import { formatDistanceToNow } from 'date-fns'
import { ChevronLeft, ChevronRight } from 'lucide-react'
import Link from 'next/link'

interface JobListProps {
  searchMode?: boolean
  searchData?: {
    jobs: any[]
    loading: boolean
    error: string | null
    totalCount: number
    pagination: {
      page: number
      totalPages: number
      hasNextPage: boolean
      hasPreviousPage: boolean
    }
    onPageChange?: (page: number) => void
  }
}

export function JobList({ searchMode = false, searchData }: JobListProps) {
  const defaultJobsData = useJobs()
  
  // Use search data if in search mode, otherwise use default jobs
  const jobsData = searchMode && searchData ? searchData : defaultJobsData
  const { jobs, loading, error } = jobsData
  
  // Handle pagination for search mode
  const handlePageChange = (page: number) => {
    if (searchMode && searchData?.onPageChange) {
      searchData.onPageChange(page)
    }
  }

  if (loading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {Array.from({ length: 4 }).map((_, i) => (
          <Card key={i} className="animate-pulse">
            <CardHeader>
              <div className="h-6 bg-muted rounded w-3/4"></div>
              <div className="h-4 bg-muted rounded w-1/2"></div>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="h-4 bg-muted rounded"></div>
                <div className="h-4 bg-muted rounded w-5/6"></div>
                <div className="flex gap-2">
                  <div className="h-6 bg-muted rounded w-16"></div>
                  <div className="h-6 bg-muted rounded w-20"></div>
                  <div className="h-6 bg-muted rounded w-14"></div>
                </div>
                <div className="h-10 bg-muted rounded"></div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    )
  }

  if (error) {
    return (
      <Card>
        <CardContent className="p-6 text-center">
          <p className="text-destructive">Error loading jobs: {error}</p>
          <Button variant="outline" className="mt-4" onClick={() => window.location.reload()}>
            Try Again
          </Button>
        </CardContent>
      </Card>
    )
  }

  if (jobs.length === 0) {
    return (
      <Card>
        <CardContent className="p-6 text-center">
          <p className="text-muted-foreground">
            {searchMode ? 'No jobs found matching your search criteria.' : 'No jobs available at the moment.'}
          </p>
          {searchMode && (
            <p className="text-sm text-muted-foreground mt-2">
              Try adjusting your search filters or check back later.
            </p>
          )}
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {jobs.map((job) => (
          <Card key={job.id}>
            <CardHeader>
              <CardTitle>
                <Link 
                  href={`/jobs/${job.id}`}
                  className="hover:text-primary transition-colors cursor-pointer"
                >
                  {job.title}
                </Link>
              </CardTitle>
              <CardDescription>
                {job.companies?.name} • {job.location} • {job.employment_type}
                {job.salary_min && job.salary_max && (
                  <> • ${job.salary_min.toLocaleString()}-${job.salary_max.toLocaleString()}</>
                )}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-sm text-muted-foreground line-clamp-3">
                {job.description}
              </p>
              
              {job.skills && job.skills.length > 0 && (
                <div className="flex flex-wrap gap-2">
                  {job.skills.slice(0, 5).map((skill, index) => (
                    <Tag key={index} variant="outline">
                      {skill}
                    </Tag>
                  ))}
                  {job.skills.length > 5 && (
                    <Tag variant="secondary">
                      +{job.skills.length - 5} more
                    </Tag>
                  )}
                </div>
              )}
              
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <span className="text-xs text-muted-foreground">
                    Posted {formatDistanceToNow(new Date(job.posted_at))} ago
                  </span>
                  {job.companies?.is_verified && (
                    <Tag variant="default" className="text-xs">
                      Verified
                    </Tag>
                  )}
                </div>
                {job.apply_url ? (
                  <Button 
                    onClick={() => job.apply_url && window.open(job.apply_url, '_blank', 'noopener,noreferrer')}
                  >
                    Apply Now
                  </Button>
                ) : (
                  <Button disabled>
                    No Apply Link
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Pagination for search mode */}
      {searchMode && searchData && searchData.pagination.totalPages > 1 && (
        <div className="flex items-center justify-center gap-2 pt-6">
          <Button
            variant="outline"
            size="sm"
            onClick={() => handlePageChange(searchData.pagination.page - 1)}
            disabled={!searchData.pagination.hasPreviousPage}
            className="flex items-center gap-1"
          >
            <ChevronLeft className="h-4 w-4" />
            Previous
          </Button>
          
          <div className="flex items-center gap-1">
            {[...Array(Math.min(5, searchData.pagination.totalPages))].map((_, i) => {
              const page = i + 1
              const isCurrentPage = page === searchData.pagination.page
              return (
                <Button
                  key={page}
                  variant={isCurrentPage ? "default" : "outline"}
                  size="sm"
                  onClick={() => handlePageChange(page)}
                  className="w-10"
                >
                  {page}
                </Button>
              )
            })}
          </div>

          <Button
            variant="outline"
            size="sm"
            onClick={() => handlePageChange(searchData.pagination.page + 1)}
            disabled={!searchData.pagination.hasNextPage}
            className="flex items-center gap-1"
          >
            Next
            <ChevronRight className="h-4 w-4" />
          </Button>
        </div>
      )}
    </div>
  )
}
