// Generated by Copilot
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select } from '@/components/ui/select'
import { Search, Filter, X } from 'lucide-react'

interface SearchFilters {
  title: string
  location: string
  employmentType: string
  skills: string
  salaryMin: string
  salaryMax: string
}

interface JobSearchProps {
  onSearch: (filters: SearchFilters) => void
  onClear: () => void
  loading?: boolean
  totalResults?: number
}

export function JobSearch({ onSearch, onClear, loading = false, totalResults }: JobSearchProps) {
  const [filters, setFilters] = useState<SearchFilters>({
    title: '',
    location: '',
    employmentType: '',
    skills: '',
    salaryMin: '',
    salaryMax: ''
  })

  const [showAdvanced, setShowAdvanced] = useState(false)

  // Handle input changes
  const handleInputChange = (field: keyof SearchFilters, value: string) => {
    setFilters(prev => ({
      ...prev,
      [field]: value
    }))
  }

  // Handle search submission
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    onSearch(filters)
  }

  // Handle clear filters
  const handleClear = () => {
    setFilters({
      title: '',
      location: '',
      employmentType: '',
      skills: '',
      salaryMin: '',
      salaryMax: ''
    })
    onClear()
  }

  // Check if any filters are active
  const hasActiveFilters = Object.values(filters).some(value => value.trim() !== '')

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Search className="h-5 w-5" />
          Search Jobs
        </CardTitle>
        <CardDescription>
          Find your perfect remote opportunity
          {totalResults !== undefined && (
            <span className="ml-2 font-medium text-foreground">
              ({totalResults} {totalResults === 1 ? 'job' : 'jobs'} found)
            </span>
          )}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSearch} className="space-y-4">
          {/* Basic Search Row */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="job-title">Job Title or Keywords</Label>
              <Input
                id="job-title"
                placeholder="e.g. Frontend Developer, React, JavaScript"
                value={filters.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="location">Location</Label>
              <Input
                id="location"
                placeholder="e.g. Remote, San Francisco, Europe"
                value={filters.location}
                onChange={(e) => handleInputChange('location', e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="employment-type">Employment Type</Label>
              <Select
                id="employment-type"
                value={filters.employmentType}
                onChange={(e) => handleInputChange('employmentType', e.target.value)}
              >
                <option value="">All Types</option>
                <option value="full-time">Full-time</option>
                <option value="part-time">Part-time</option>
                <option value="contract">Contract</option>
                <option value="freelance">Freelance</option>
                <option value="internship">Internship</option>
              </Select>
            </div>
          </div>

          {/* Advanced Filters Toggle */}
          <div className="flex items-center justify-between pt-2">
            <Button
              type="button"
              variant="ghost"
              size="sm"
              onClick={() => setShowAdvanced(!showAdvanced)}
              className="flex items-center gap-2"
            >
              <Filter className="h-4 w-4" />
              {showAdvanced ? 'Hide' : 'Show'} Advanced Filters
            </Button>
          </div>

          {/* Advanced Filters */}
          {showAdvanced && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-muted/50 rounded-lg">
              <div className="space-y-2">
                <Label htmlFor="skills">Required Skills</Label>
                <Input
                  id="skills"
                  placeholder="e.g. React, TypeScript, Node.js"
                  value={filters.skills}
                  onChange={(e) => handleInputChange('skills', e.target.value)}
                />
              </div>
              <div className="grid grid-cols-2 gap-2">
                <div className="space-y-2">
                  <Label htmlFor="salary-min">Min Salary ($)</Label>
                  <Input
                    id="salary-min"
                    type="number"
                    placeholder="80000"
                    value={filters.salaryMin}
                    onChange={(e) => handleInputChange('salaryMin', e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="salary-max">Max Salary ($)</Label>
                  <Input
                    id="salary-max"
                    type="number"
                    placeholder="150000"
                    value={filters.salaryMax}
                    onChange={(e) => handleInputChange('salaryMax', e.target.value)}
                  />
                </div>
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex gap-2 pt-2">
            <Button type="submit" disabled={loading} className="flex items-center gap-2">
              <Search className="h-4 w-4" />
              {loading ? 'Searching...' : 'Search Jobs'}
            </Button>
            {hasActiveFilters && (
              <Button
                type="button"
                variant="outline"
                onClick={handleClear}
                className="flex items-center gap-2"
              >
                <X className="h-4 w-4" />
                Clear Filters
              </Button>
            )}
          </div>
        </form>
      </CardContent>
    </Card>
  )
}
