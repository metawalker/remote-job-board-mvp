// Generated by Copilot
'use client'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Tag } from '@/components/ui/tag'
import { Search, MapPin, Code, Briefcase } from 'lucide-react'
import { useRouter } from 'next/navigation'

interface SearchSuggestionsProps {
  onQuickSearch?: (query: string, type: 'title' | 'location' | 'skills') => void
}

export function SearchSuggestions({ onQuickSearch }: SearchSuggestionsProps) {
  const router = useRouter()

  const popularTitles = [
    'Frontend Developer', 'Backend Developer', 'Full Stack Developer',
    'React Developer', 'Node.js Developer', 'Python Developer',
    'DevOps Engineer', 'Data Scientist', 'Product Manager'
  ]

  const popularSkills = [
    'React', 'TypeScript', 'Node.js', 'Python', 'JavaScript',
    'AWS', 'Docker', 'GraphQL', 'Next.js', 'PostgreSQL'
  ]

  const popularLocations = [
    'Remote', 'United States', 'Europe', 'Canada',
    'United Kingdom', 'Germany', 'Australia', 'Netherlands'
  ]

  const handleQuickSearch = (query: string, type: 'title' | 'location' | 'skills') => {
    if (onQuickSearch) {
      onQuickSearch(query, type)
    } else {
      // Navigate to search page with the query
      const searchParam = type === 'title' ? 'title' : type === 'location' ? 'location' : 'skills'
      router.push(`/search?${searchParam}=${encodeURIComponent(query)}`)
    }
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="text-sm font-medium flex items-center gap-2">
            <Briefcase className="h-4 w-4" />
            Popular Job Titles
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-2">
          {popularTitles.map((title) => (
            <Button
              key={title}
              variant="ghost"
              size="sm"
              className="justify-start h-auto p-2 font-normal"
              onClick={() => handleQuickSearch(title, 'title')}
            >
              {title}
            </Button>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="text-sm font-medium flex items-center gap-2">
            <Code className="h-4 w-4" />
            Popular Skills
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-2">
            {popularSkills.map((skill) => (
              <Tag
                key={skill}
                variant="outline"
                className="cursor-pointer hover:bg-primary hover:text-primary-foreground transition-colors"
                onClick={() => handleQuickSearch(skill, 'skills')}
              >
                {skill}
              </Tag>
            ))}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="text-sm font-medium flex items-center gap-2">
            <MapPin className="h-4 w-4" />
            Popular Locations
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-2">
          {popularLocations.map((location) => (
            <Button
              key={location}
              variant="ghost"
              size="sm"
              className="justify-start h-auto p-2 font-normal"
              onClick={() => handleQuickSearch(location, 'location')}
            >
              {location}
            </Button>
          ))}
        </CardContent>
      </Card>
    </div>
  )
}
