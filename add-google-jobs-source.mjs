// Generated by Copilot
// Script to add Google Jobs Search source to the database
import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Load environment variables
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('❌ Missing required environment variables:')
  console.error('- NEXT_PUBLIC_SUPABASE_URL')
  console.error('- SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function addGoogleJobsSource() {
  console.log('🔍 Adding Google Jobs Search source...\n')

  try {
    // Check if Google Jobs source already exists
    const { data: existingSource } = await supabase
      .from('scraping_sources')
      .select('id, name')
      .or('name.eq.Google Jobs Search,url.like.%google.com/search%ibp=htl;jobs%')
      .single()

    if (existingSource) {
      console.log('✅ Google Jobs Search source already exists:', existingSource.name)
      return
    }

    // Add the Google Jobs source
    const { data, error } = await supabase
      .from('scraping_sources')
      .insert({
        name: 'Google Jobs Search',
        url: 'https://www.google.com/search?q=remote+software+developer&ibp=htl;jobs',
        enabled: true,
        description: 'Google Jobs search results with advanced scraping (Puppeteer + Structured)',
        priority: 'high',
        config: {
          scraper_type: 'google_jobs',
          use_puppeteer: true,
          use_structured: true,
          max_pages: 2,
          max_results: 30,
          query: 'remote software developer',
          location: 'United States'
        }
      })
      .select()

    if (error) {
      console.error('❌ Error adding Google Jobs source:', error)
      return
    }

    console.log('✅ Successfully added Google Jobs Search source!')
    console.log('📊 Source details:', data[0])

    // List all sources
    const { data: allSources } = await supabase
      .from('scraping_sources')
      .select('id, name, enabled, priority, description')
      .order('priority', { ascending: false })

    console.log('\n📋 All scraping sources:')
    allSources?.forEach((source, index) => {
      const status = source.enabled ? '🟢' : '🔴'
      const priority = source.priority.toUpperCase()
      console.log(`${index + 1}. ${status} [${priority}] ${source.name}`)
      console.log(`   ${source.description}`)
    })

  } catch (error) {
    console.error('❌ Script failed:', error)
  }
}

// Run the script
addGoogleJobsSource().catch(console.error)
