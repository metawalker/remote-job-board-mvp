-- Generated by Copilot
-- Scraping Sources Management Migration
-- This migration adds a dedicated table for managing individual scraping sources

-- Create scraping_sources table
CREATE TABLE IF NOT EXISTS scraping_sources (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    url TEXT NOT NULL,
    enabled BOOLEAN DEFAULT true,
    description TEXT,
    priority VARCHAR(20) DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),
    config JSONB DEFAULT '{}',
    last_scraped_at TIMESTAMP WITH TIME ZONE,
    total_jobs_found INTEGER DEFAULT 0,
    success_rate DECIMAL(5,2) DEFAULT 100.0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID REFERENCES auth.users(id),
    updated_by UUID REFERENCES auth.users(id)
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_scraping_sources_enabled ON scraping_sources(enabled);
CREATE INDEX IF NOT EXISTS idx_scraping_sources_priority ON scraping_sources(priority);
CREATE INDEX IF NOT EXISTS idx_scraping_sources_last_scraped ON scraping_sources(last_scraped_at);
CREATE INDEX IF NOT EXISTS idx_scraping_sources_name ON scraping_sources(name);

-- Enable RLS for scraping_sources
ALTER TABLE scraping_sources ENABLE ROW LEVEL SECURITY;

-- Create policies for scraping_sources
-- Only admins can view scraping sources
CREATE POLICY "Admin can view scraping sources" ON scraping_sources
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND is_admin = true
        )
    );

-- Only admins can insert scraping sources
CREATE POLICY "Admin can insert scraping sources" ON scraping_sources
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND is_admin = true
        )
    );

-- Only admins can update scraping sources
CREATE POLICY "Admin can update scraping sources" ON scraping_sources
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND is_admin = true
        )
    ) WITH CHECK (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND is_admin = true
        )
    );

-- Only admins can delete scraping sources
CREATE POLICY "Admin can delete scraping sources" ON scraping_sources
    FOR DELETE USING (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND is_admin = true
        )
    );

-- Create function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_scraping_sources_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    NEW.updated_by = auth.uid();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for updating updated_at
CREATE TRIGGER update_scraping_sources_updated_at_trigger
    BEFORE UPDATE ON scraping_sources
    FOR EACH ROW
    EXECUTE FUNCTION update_scraping_sources_updated_at();

-- Insert default scraping sources
INSERT INTO scraping_sources (name, url, enabled, description, priority, created_by)
VALUES 
    ('Y Combinator Jobs', 'https://www.ycombinator.com/jobs/search?remote=true', true, 'Remote jobs from Y Combinator startups', 'high', (
        SELECT u.id FROM auth.users u
        JOIN user_profiles up ON u.id = up.user_id 
        WHERE up.is_admin = true 
        LIMIT 1
    )),
    ('We Work Remotely', 'https://weworkremotely.com/remote-jobs', true, 'Popular remote work job board', 'high', (
        SELECT u.id FROM auth.users u
        JOIN user_profiles up ON u.id = up.user_id 
        WHERE up.is_admin = true 
        LIMIT 1
    )),
    ('Remote.co', 'https://remote.co/remote-jobs/', true, 'Curated remote job listings', 'medium', (
        SELECT u.id FROM auth.users u
        JOIN user_profiles up ON u.id = up.user_id 
        WHERE up.is_admin = true 
        LIMIT 1
    )),
    ('AngelList (Wellfound)', 'https://wellfound.com/jobs?remote=true', false, 'Startup jobs with remote options', 'medium', (
        SELECT u.id FROM auth.users u
        JOIN user_profiles up ON u.id = up.user_id 
        WHERE up.is_admin = true 
        LIMIT 1
    )),
    ('FlexJobs', 'https://www.flexjobs.com/remote-jobs', false, 'Professional remote and flexible jobs', 'low', (
        SELECT u.id FROM auth.users u
        JOIN user_profiles up ON u.id = up.user_id 
        WHERE up.is_admin = true 
        LIMIT 1
    ))
ON CONFLICT DO NOTHING;

-- Grant permissions to authenticated users (admin checks are in RLS policies)
GRANT SELECT, INSERT, UPDATE, DELETE ON scraping_sources TO authenticated;
