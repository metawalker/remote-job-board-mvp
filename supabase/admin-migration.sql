-- Generated by Copilot
-- Admin Enhancement Migration for Remote Job Board MVP
-- This file contains additional schema changes to support admin functionality

-- Add admin role column to user_profiles table
ALTER TABLE user_profiles 
ADD COLUMN is_admin BOOLEAN DEFAULT false NOT NULL;

-- Create index for admin lookups
CREATE INDEX idx_user_profiles_admin ON user_profiles(is_admin) WHERE is_admin = true;

-- Add admin policies for jobs table
CREATE POLICY "Admins can view all jobs" ON jobs
    FOR SELECT USING (
        auth.uid() IN (
            SELECT user_id FROM user_profiles WHERE is_admin = true
        )
    );

CREATE POLICY "Admins can update all jobs" ON jobs
    FOR UPDATE USING (
        auth.uid() IN (
            SELECT user_id FROM user_profiles WHERE is_admin = true
        )
    );

CREATE POLICY "Admins can delete jobs" ON jobs
    FOR DELETE USING (
        auth.uid() IN (
            SELECT user_id FROM user_profiles WHERE is_admin = true
        )
    );

-- Add admin policies for companies table
CREATE POLICY "Admins can update all companies" ON companies
    FOR UPDATE USING (
        auth.uid() IN (
            SELECT user_id FROM user_profiles WHERE is_admin = true
        )
    );

CREATE POLICY "Admins can delete companies" ON companies
    FOR DELETE USING (
        auth.uid() IN (
            SELECT user_id FROM user_profiles WHERE is_admin = true
        )
    );

-- Function to check if current user is admin
CREATE OR REPLACE FUNCTION public.is_admin()
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM user_profiles 
        WHERE user_id = auth.uid() AND is_admin = true
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create your first admin user (replace with your actual user email)
-- You'll need to run this after signing up with your admin email
-- UPDATE user_profiles SET is_admin = true WHERE user_id = (
--     SELECT id FROM auth.users WHERE email = 'your-admin-email@example.com'
-- );
