-- Generated by Copilot
-- Supabase Database Schema for Remote Job Board MVP

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create custom types
CREATE TYPE employment_type AS ENUM ('full-time', 'part-time', 'contract', 'internship');
CREATE TYPE remote_type AS ENUM ('remote', 'hybrid', 'on-site');
CREATE TYPE application_status AS ENUM ('pending', 'reviewing', 'interview', 'rejected', 'accepted');
CREATE TYPE experience_level AS ENUM ('entry', 'mid', 'senior', 'lead', 'executive');

-- Create companies table
CREATE TABLE companies (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    website TEXT,
    logo_url TEXT,
    industry TEXT,
    size_category TEXT CHECK (size_category IN ('startup', 'small', 'medium', 'large', 'enterprise')),
    location TEXT,
    founded_year INTEGER,
    is_verified BOOLEAN DEFAULT false NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Create user_profiles table
CREATE TABLE user_profiles (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE NOT NULL,
    full_name TEXT,
    avatar_url TEXT,
    bio TEXT,
    skills TEXT[] DEFAULT '{}',
    experience_level experience_level,
    location TEXT,
    website TEXT,
    github_url TEXT,
    linkedin_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Create jobs table
CREATE TABLE jobs (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    company_id UUID REFERENCES companies(id) ON DELETE CASCADE NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    location TEXT NOT NULL,
    salary_min INTEGER,
    salary_max INTEGER,
    employment_type employment_type NOT NULL,
    remote_type remote_type NOT NULL,
    skills TEXT[] DEFAULT '{}',
    posted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE,
    is_active BOOLEAN DEFAULT false NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Create job_applications table
CREATE TABLE job_applications (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    job_id UUID REFERENCES jobs(id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    status application_status DEFAULT 'pending' NOT NULL,
    cover_letter TEXT,
    applied_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    UNIQUE(job_id, user_id)
);

-- Create indexes for better performance
CREATE INDEX idx_companies_name ON companies(name);
CREATE INDEX idx_companies_verified ON companies(is_verified);
CREATE INDEX idx_jobs_company_id ON jobs(company_id);
CREATE INDEX idx_jobs_active ON jobs(is_active, posted_at DESC);
CREATE INDEX idx_jobs_skills ON jobs USING GIN(skills);
CREATE INDEX idx_jobs_employment_type ON jobs(employment_type);
CREATE INDEX idx_jobs_remote_type ON jobs(remote_type);
CREATE INDEX idx_job_applications_job_id ON job_applications(job_id);
CREATE INDEX idx_job_applications_user_id ON job_applications(user_id);
CREATE INDEX idx_user_profiles_user_id ON user_profiles(user_id);

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_companies_updated_at 
    BEFORE UPDATE ON companies 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_profiles_updated_at 
    BEFORE UPDATE ON user_profiles 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_jobs_updated_at 
    BEFORE UPDATE ON jobs 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_job_applications_updated_at 
    BEFORE UPDATE ON job_applications 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Row Level Security (RLS) policies
ALTER TABLE companies ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE jobs ENABLE ROW LEVEL SECURITY;
ALTER TABLE job_applications ENABLE ROW LEVEL SECURITY;

-- Companies policies
CREATE POLICY "Anyone can view companies" ON companies
    FOR SELECT USING (true);

CREATE POLICY "Authenticated users can insert companies" ON companies
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Users can update companies they created" ON companies
    FOR UPDATE USING (auth.role() = 'authenticated');

-- User profiles policies
CREATE POLICY "Users can view all profiles" ON user_profiles
    FOR SELECT USING (true);

CREATE POLICY "Users can update own profile" ON user_profiles
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own profile" ON user_profiles
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Jobs policies
CREATE POLICY "Anyone can view active jobs" ON jobs
    FOR SELECT USING (is_active = true);

CREATE POLICY "Authenticated users can insert jobs" ON jobs
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Users can update their own jobs" ON jobs
    FOR UPDATE USING (auth.uid() IN (
        SELECT user_id FROM user_profiles WHERE user_id = auth.uid()
    ));

-- Job applications policies
CREATE POLICY "Users can view their own applications" ON job_applications
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own applications" ON job_applications
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own applications" ON job_applications
    FOR UPDATE USING (auth.uid() = user_id);

-- Function to automatically create user profile
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.user_profiles (user_id, full_name, avatar_url)
    VALUES (
        NEW.id,
        NEW.raw_user_meta_data->>'full_name',
        NEW.raw_user_meta_data->>'avatar_url'
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to create profile on user signup
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Insert sample companies
INSERT INTO companies (name, description, website, industry, size_category, location, founded_year, is_verified) VALUES
('TechCorp', 'A leading technology company focused on building scalable web applications and cloud solutions.', 'https://techcorp.com', 'Technology', 'large', 'San Francisco, CA', 2010, true),
('DesignStudio', 'Creative design agency specializing in user experience and interface design for digital products.', 'https://designstudio.com', 'Design', 'medium', 'New York, NY', 2015, true),
('StartupXYZ', 'Fast-growing startup building innovative solutions for the modern workplace.', 'https://startupxyz.com', 'Software', 'startup', 'Austin, TX', 2020, false),
('CloudFirst', 'Infrastructure and DevOps consulting company helping businesses scale their cloud operations.', 'https://cloudfirst.com', 'Cloud Services', 'small', 'Remote', 2018, true);

-- Insert sample jobs with company references
INSERT INTO jobs (company_id, title, description, location, salary_min, salary_max, employment_type, remote_type, skills, is_active) VALUES
(
    (SELECT id FROM companies WHERE name = 'TechCorp'),
    'Senior Frontend Developer',
    'We are looking for an experienced frontend developer to join our remote team. You will work on building scalable web applications using React, TypeScript, and modern web technologies.',
    'Remote',
    80000,
    120000,
    'full-time',
    'remote',
    ARRAY['React', 'TypeScript', 'Next.js', 'JavaScript', 'HTML', 'CSS'],
    true
),
(
    (SELECT id FROM companies WHERE name = 'DesignStudio'),
    'UI/UX Designer',
    'Join our design team to create beautiful and intuitive user experiences. We are looking for someone with strong design skills and experience with modern design tools.',
    'Remote',
    60000,
    90000,
    'contract',
    'remote',
    ARRAY['Figma', 'Adobe Creative Suite', 'Prototyping', 'User Research', 'Design Systems'],
    true
),
(
    (SELECT id FROM companies WHERE name = 'StartupXYZ'),
    'Full Stack Developer',
    'We need a versatile full-stack developer who can work on both frontend and backend systems. Experience with Node.js, PostgreSQL, and cloud platforms is preferred.',
    'Hybrid - San Francisco',
    70000,
    110000,
    'full-time',
    'hybrid',
    ARRAY['Node.js', 'React', 'PostgreSQL', 'AWS', 'Docker', 'TypeScript'],
    true
),
(
    (SELECT id FROM companies WHERE name = 'CloudFirst'),
    'DevOps Engineer',
    'Looking for a DevOps engineer to help us scale our infrastructure. You will work with Kubernetes, Docker, and various cloud platforms to ensure our applications run smoothly.',
    'Remote',
    90000,
    140000,
    'full-time',
    'remote',
    ARRAY['Kubernetes', 'Docker', 'AWS', 'Terraform', 'Jenkins', 'Linux'],
    true
);
