-- Generated by Copilot
-- Manual SQL script to create scraping_sources table and insert test data
-- Run this in your Supabase SQL editor

-- First, check if the table exists
SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name = 'scraping_sources';

-- Create scraping_sources table if it doesn't exist
CREATE TABLE IF NOT EXISTS scraping_sources (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    url TEXT NOT NULL,
    enabled BOOLEAN DEFAULT true,
    description TEXT,
    priority VARCHAR(20) DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),
    config JSONB DEFAULT '{}',
    last_scraped_at TIMESTAMP WITH TIME ZONE,
    total_jobs_found INTEGER DEFAULT 0,
    success_rate DECIMAL(5,2) DEFAULT 100.0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID REFERENCES auth.users(id),
    updated_by UUID REFERENCES auth.users(id)
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_scraping_sources_enabled ON scraping_sources(enabled);
CREATE INDEX IF NOT EXISTS idx_scraping_sources_priority ON scraping_sources(priority);
CREATE INDEX IF NOT EXISTS idx_scraping_sources_last_scraped ON scraping_sources(last_scraped_at);
CREATE INDEX IF NOT EXISTS idx_scraping_sources_name ON scraping_sources(name);

-- Enable RLS for scraping_sources
ALTER TABLE scraping_sources ENABLE ROW LEVEL SECURITY;

-- Create policies for scraping_sources
-- Only admins can view scraping sources
DROP POLICY IF EXISTS "Admin can view scraping sources" ON scraping_sources;
CREATE POLICY "Admin can view scraping sources" ON scraping_sources
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND is_admin = true
        )
    );

-- Only admins can insert scraping sources
DROP POLICY IF EXISTS "Admin can insert scraping sources" ON scraping_sources;
CREATE POLICY "Admin can insert scraping sources" ON scraping_sources
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND is_admin = true
        )
    );

-- Only admins can update scraping sources
DROP POLICY IF EXISTS "Admin can update scraping sources" ON scraping_sources;
CREATE POLICY "Admin can update scraping sources" ON scraping_sources
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND is_admin = true
        )
    ) WITH CHECK (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND is_admin = true
        )
    );

-- Only admins can delete scraping sources
DROP POLICY IF EXISTS "Admin can delete scraping sources" ON scraping_sources;
CREATE POLICY "Admin can delete scraping sources" ON scraping_sources
    FOR DELETE USING (
        EXISTS (
            SELECT 1 FROM user_profiles 
            WHERE user_id = auth.uid() 
            AND is_admin = true
        )
    );

-- Insert default scraping sources (only if table is empty)
INSERT INTO scraping_sources (name, url, enabled, description, priority)
SELECT * FROM (VALUES 
    ('Y Combinator Jobs', 'https://www.ycombinator.com/jobs/search?remote=true', true, 'Remote jobs from Y Combinator startups', 'high'),
    ('We Work Remotely', 'https://weworkremotely.com/remote-jobs', true, 'Popular remote work job board', 'high'),
    ('Remote.co', 'https://remote.co/remote-jobs/', true, 'Curated remote job listings', 'medium'),
    ('AngelList (Wellfound)', 'https://wellfound.com/jobs?remote=true', false, 'Startup jobs with remote options', 'medium'),
    ('FlexJobs', 'https://www.flexjobs.com/remote-jobs', false, 'Professional remote and flexible jobs', 'low')
) AS v(name, url, enabled, description, priority)
WHERE NOT EXISTS (SELECT 1 FROM scraping_sources LIMIT 1);

-- Verify the data was inserted
SELECT id, name, url, enabled, description, priority, created_at 
FROM scraping_sources 
ORDER BY priority DESC, name;
